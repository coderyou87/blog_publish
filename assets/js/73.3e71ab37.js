(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{447:function(a,t,s){"use strict";s.r(t);var n=s(42),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"线程基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程基础知识"}},[a._v("#")]),a._v(" 线程基础知识")]),a._v(" "),s("h2",{attrs:{id:"一、juc-四大口诀"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、juc-四大口诀"}},[a._v("#")]),a._v(" 一、JUC 四大口诀")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("高内聚低耦合前提下，封装思想")]),a._v(" "),s("p",[a._v("线程操作资源类")])]),a._v(" "),s("li",[s("p",[a._v("判断、干活、通知")])]),a._v(" "),s("li",[s("p",[a._v("防止虚假唤醒,"),s("code",[a._v("wait")]),a._v(" 方法要注意使用 "),s("code",[a._v("while")]),a._v("判断")])]),a._v(" "),s("li",[s("p",[a._v("注意标志位 "),s("code",[a._v("flag")]),a._v("，可能是 "),s("code",[a._v("volatile")]),a._v("的")])])]),a._v(" "),s("h2",{attrs:{id:"二、为什么多线程极其重要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、为什么多线程极其重要"}},[a._v("#")]),a._v(" 二、为什么多线程极其重要")]),a._v(" "),s("h3",{attrs:{id:"_2-1-硬件方面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-硬件方面"}},[a._v("#")]),a._v(" 2.1 硬件方面")]),a._v(" "),s("p",[a._v("摩尔定律失效")]),a._v(" "),s("p",[s("strong",[a._v("摩尔定律：")])]),a._v(" "),s("blockquote",[s("p",[a._v("它是由英特尔创始人之一"),s("code",[a._v("Gordon Moore")]),a._v("(戈登·摩尔)提出来的。其内容为：\n当价格不变时，集成电路上可容纳的元器件的数目约每隔 18-24 个月便会增加一倍，性能也将提升一倍。\n换言之，每一美元所能买到的电脑性能，将每隔 18-24 个月翻一倍以上。这一定律揭示了信息技术进步的速度。")])]),a._v(" "),s("p",[s("strong",[a._v("可是从 2003 年开始 CPU 主频已经不再翻倍，而是采用多核而不是更快的主频。")])]),a._v(" "),s("p",[a._v("在主频不再提高且核数在不断增加的情况下，要想让程序更快就要用到"),s("strong",[a._v("并行或并发编程")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"_2-2-软件方面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-软件方面"}},[a._v("#")]),a._v(" 2.2 软件方面")]),a._v(" "),s("p",[a._v("高并发系统，异步+回调等生产需求")]),a._v(" "),s("h2",{attrs:{id:"三、从-start-一个线程说起"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、从-start-一个线程说起"}},[a._v("#")]),a._v(" 三、从 start 一个线程说起")]),a._v(" "),s("h3",{attrs:{id:"_3-1-java-线程理解以及-openjdk-中的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-java-线程理解以及-openjdk-中的实现"}},[a._v("#")]),a._v(" 3.1 Java 线程理解以及 openjdk 中的实现")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("private native void start0();")])]),a._v(" "),s("li",[s("code",[a._v("Java")]),a._v("语言本身底层就是 C++语言")]),a._v(" "),s("li",[s("code",[a._v("OpenJDK")]),a._v("源码网址\n"),s("ol",[s("li",[s("code",[a._v("http://openjdk.java.net/")])]),a._v(" "),s("li",[s("code",[a._v("openjdk8\\hotspot\\src\\share\\vm\\runtime")])])])])]),a._v(" "),s("h3",{attrs:{id:"_3-2-更加底层的-c-源码解读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-更加底层的-c-源码解读"}},[a._v("#")]),a._v(" 3.2 更加底层的 C++源码解读")]),a._v(" "),s("ol",[s("li",[s("p",[s("code",[a._v("openjdk8\\jdk\\src\\share\\native\\java\\lang")])]),a._v(" "),s("p",[s("code",[a._v("thread.c")])]),a._v(" "),s("p",[s("code",[a._v("java")]),a._v(" 线程是通过 start 的方法启动执行的，主要内容在 "),s("code",[a._v("native")]),a._v("方法 "),s("code",[a._v("start0")]),a._v(" 中，\nOpenjdk 写的 JNI 一般是一一对应的，Thread.java 对应的就是 Thread.c\nstart0 其实就是 JVM_StartThread。此时查看源代码可以看到在 jvm.h 中找到了声明，jvm.cpp 中有实现。")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234228556",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/6dc3a3a7c51144b48c0d096a230c52d1.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/6dc3a3a7c51144b48c0d096a230c52d1.png",alt:"image-20210406234228556"}})])])]),a._v(" "),s("li",[s("p",[a._v("openjdk8\\hotspot\\src\\share\\vm\\prims")]),a._v(" "),s("p",[a._v("jvm.cpp")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234304084",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/bcbd2412037d485d80a8f2f2ef13edef.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/bcbd2412037d485d80a8f2f2ef13edef.png",alt:"image-20210406234304084"}})])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234316120",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/e3d7c999930049958597d838a12bf04f.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/e3d7c999930049958597d838a12bf04f.png",alt:"image-20210406234316120"}})])])]),a._v(" "),s("li",[s("p",[a._v("openjdk8\\hotspot\\src\\share\\vm\\runtime")]),a._v(" "),s("p",[a._v("thread.cpp")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234333971",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/a5bef0f0c0a44d388fd3ff730194b1b0.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/a5bef0f0c0a44d388fd3ff730194b1b0.png",alt:"image-20210406234333971"}})])])])]),a._v(" "),s("h2",{attrs:{id:"四、java-多线程相关概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、java-多线程相关概念"}},[a._v("#")]),a._v(" 四、Java 多线程相关概念")]),a._v(" "),s("h3",{attrs:{id:"_4-1-进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-进程"}},[a._v("#")]),a._v(" 4.1 进程")]),a._v(" "),s("p",[a._v("是程序的⼀次执⾏，是"),s("strong",[a._v("系统进⾏资源分配和调度的独⽴单位")]),a._v("，每⼀个进程都有它⾃⼰的"),s("strong",[a._v("内存空间和系统资源")])]),a._v(" "),s("h3",{attrs:{id:"_4-2-线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-线程"}},[a._v("#")]),a._v(" 4.2 线程")]),a._v(" "),s("p",[a._v("在同"),s("strong",[a._v("⼀个进程内⼜可以执⾏多个任务")]),a._v("，⽽这每⼀个任务我们就可以看做是⼀个线程")]),a._v(" "),s("p",[a._v("⼀个进程会有 1 个或多个线程的")]),a._v(" "),s("h3",{attrs:{id:"_4-3-进程与线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-进程与线程"}},[a._v("#")]),a._v(" 4.3 进程与线程")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234735354",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/ca683e4e886e466c83105a0815ffaf67.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/ca683e4e886e466c83105a0815ffaf67.png",alt:"image-20210406234735354"}})])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234749501",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/336f21a8a9b7461a8eb158a17d79c59d.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/336f21a8a9b7461a8eb158a17d79c59d.png",alt:"image-20210406234749501"}})])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234800022",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/9bd7a64e65994fb3856c5a978e7677bd.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/9bd7a64e65994fb3856c5a978e7677bd.png",alt:"image-20210406234800022"}})])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234809674",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/4a756506fe0745de8c5f3aa58ac95d11.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/4a756506fe0745de8c5f3aa58ac95d11.png",alt:"image-20210406234809674"}})])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234830047",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/f0f315590ad5450481fa99d58623cb48.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/f0f315590ad5450481fa99d58623cb48.png",alt:"image-20210406234830047"}})])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234840879",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/ec22ed7c18734aa18ebde7a9437b0192.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/ec22ed7c18734aa18ebde7a9437b0192.png",alt:"image-20210406234840879"}})])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234849052",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/6f3b406dacec4c448109ab51fe9abbc4.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/6f3b406dacec4c448109ab51fe9abbc4.png",alt:"image-20210406234849052"}})])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234858700",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/ba9dc85ff1bc4c0b8bea4a2950a61f5e.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/ba9dc85ff1bc4c0b8bea4a2950a61f5e.png",alt:"image-20210406234858700"}})])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234911390",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/ab263fbd800142e98d6c20e403393daa.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/ab263fbd800142e98d6c20e403393daa.png",alt:"image-20210406234911390"}})])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234919917",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/d85d953b4a904bc78f6ce86936e7b3b7.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/d85d953b4a904bc78f6ce86936e7b3b7.png",alt:"image-20210406234919917"}})])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406234929378",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/d9695336a26f47d1852521d9d6b9f44c.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/d9695336a26f47d1852521d9d6b9f44c.png",alt:"image-20210406234929378"}})])]),a._v(" "),s("h3",{attrs:{id:"_4-4-管程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-管程"}},[a._v("#")]),a._v(" 4.4 管程")]),a._v(" "),s("p",[a._v("Monitor(监视器)，也就是我们平时所说的锁")]),a._v(" "),s("blockquote",[s("p",[a._v("Monitor 其实是一种同步机制，他的义务是保证（同一时间）只有一个线程可以访问被保护的数据和代码。")]),a._v(" "),s("p",[a._v("JVM 中同步是基于进入和退出监视器对象(Monitor,管程对象)来实现的，每个对象实例都会有一个 Monitor 对象，")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"t1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("Monitor 对象会和 Java 对象一同创建并销毁，它底层是由 C++语言来实现的。")])]),a._v(" "),s("p",[a._v("jvm 第 3 版中关于管程的描述")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210406235115161",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/10d66356aad1439e8d3508806d7013d6.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-06/10d66356aad1439e8d3508806d7013d6.png",alt:"image-20210406235115161"}})])]),a._v(" "),s("h2",{attrs:{id:"五、用户线程与守护线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、用户线程与守护线程"}},[a._v("#")]),a._v(" 五、用户线程与守护线程")]),a._v(" "),s("p",[a._v("Java 线程分为用户线程和守护线程，\n线程的 daemon 属性为 true 表示是守护线程，false 表示是用户线程")]),a._v(" "),s("h3",{attrs:{id:"_5-1-守护线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-守护线程"}},[a._v("#")]),a._v(" 5.1 守护线程")]),a._v(" "),s("p",[a._v("是一种特殊的线程，在后台默默地完成一些系统性的服务，比如"),s("strong",[a._v("垃圾回收线程")])]),a._v(" "),s("h3",{attrs:{id:"_5-2-用户线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-用户线程"}},[a._v("#")]),a._v(" 5.2 用户线程")]),a._v(" "),s("p",[a._v("是系统的工作线程，它会完成这个程序需要完成的业务操作")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("it")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DaemonDemo")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"\\t 开始运行，"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("isDaemon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"守护线程"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"用户线程"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"t1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//线程的daemon属性为true表示是守护线程，false表示是用户线程")]),a._v("\n    t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setDaemon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//3秒钟后主线程再运行")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("SECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InterruptedException")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"----------main线程运行完毕"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"_5-3-重点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-重点"}},[a._v("#")]),a._v(" 5.3 重点")]),a._v(" "),s("p",[s("strong",[a._v("当程序中所有用户线程执行完毕之后，不管守护线程是否结束，系统都会自动退出")])]),a._v(" "),s("p",[a._v("如果用户线程全部结束了，意味着程序需要完成的业务操作已经结束了，系统可以退出\n了。所以"),s("strong",[a._v("当系统只剩下守护进程的时候，java 虚拟机会自动退出")])]),a._v(" "),s("p",[a._v("设置守护线程，需要在 start()方法之前进行")])])}),[],!1,null,null,null);t.default=e.exports}}]);