(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{411:function(t,a,v){"use strict";v.r(a);var _=v(42),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"运行时数据区概述及线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#运行时数据区概述及线程"}},[t._v("#")]),t._v(" 运行时数据区概述及线程")]),t._v(" "),v("h2",{attrs:{id:"一、前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),v("p",[t._v("运行时数据区")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-01/3d71193329e04f128de92d2346f695c6.png",alt:"f6c83bec90974ab2b54c644e05f869d8"}})]),t._v(" "),v("p",[t._v("当我们通过前面的：类的"),v("strong",[t._v("加载 --\x3e 验证 --\x3e 准备 --\x3e 解析 --\x3e 初始化")]),t._v("，这几个阶段完成后，就会用到执行引擎对我们的类进行使用，同时"),v("strong",[t._v("执行引擎将会使用到我们的运行时数据区")])]),t._v(" "),v("p",[v("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-01/1273e901980b4ef984180b93256576af.png",alt:"42eab7a6999400aaf897cf0767471adb"}})]),t._v(" "),v("p",[t._v("比如大厨做饭，我们把大厨后面的东西（"),v("code",[t._v("切好的菜，刀，调料")]),t._v("），比作是"),v("code",[t._v("运行时数据区")]),t._v("。而"),v("code",[t._v("厨师")]),t._v("可以类比于"),v("code",[t._v("执行引擎")]),t._v("，将通过准备的东西制作成精美的菜品")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-01/41a7ee2c921348de81f24a29232db25e.png",alt:"b563b0aba573cc74d7b1e95be328c713"}})]),t._v(" "),v("h2",{attrs:{id:"二、运行时数据区结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、运行时数据区结构"}},[t._v("#")]),t._v(" 二、运行时数据区结构")]),t._v(" "),v("h3",{attrs:{id:"_2-1-运行时数据区与线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-运行时数据区与线程"}},[t._v("#")]),t._v(" 2.1 运行时数据区与线程")]),t._v(" "),v("p",[v("strong",[t._v("内存")])]),t._v(" "),v("ul",[v("li",[t._v("内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了Java在运行过程中"),v("strong",[t._v("内存申请、分配、管理的策略")]),t._v("，保证了JVM的高效稳定运行。")]),t._v(" "),v("li",[t._v("**不同的JVM对于内存的划分方式和管理机制存在着部分差异。**结合JVM虚拟机规范，来探讨一下经典的JVM内存布局。")]),t._v(" "),v("li",[t._v("我们通过磁盘或者网络IO得到的数据，都需要先加载到内存中，然后CPU从内存中获取数据进行读取，也就是说内存充当了CPU和磁盘之间的桥梁")])]),t._v(" "),v("p",[v("strong",[t._v("运行时数据区的完整图")])]),t._v(" "),v("p",[v("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-01/1b1069dcfa22456284caf7008e85542a.png",alt:"20201120193615"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-01/0047b460c27049fe8587e2434ecc9b66.png",alt:"a2d3568faee058d78b3000e87a6f0c21"}})]),t._v(" "),v("p",[v("strong",[t._v("说明")]),t._v("：方法区在JVM规范中是一个逻辑概念，由虚拟机自己进行具体实现，jdk7和以前的版本使用的是堆上的永久代实现的方法区，而在jdk8及以后使用的是元数据区实现方法区")]),t._v(" "),v("h3",{attrs:{id:"_2-2-线程的内存空间"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-线程的内存空间"}},[t._v("#")]),t._v(" 2.2 线程的内存空间")]),t._v(" "),v("p",[t._v("Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机的退出而销毁。"),v("strong",[t._v("另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。")])]),t._v(" "),v("p",[v("strong",[t._v("灰色的为单独线程私有的，红色的为多个线程共享的")]),t._v("。即：")]),t._v(" "),v("ul",[v("li",[t._v("线程独有：独立包括"),v("strong",[t._v("程序计数器、栈、本地方法栈")])]),t._v(" "),v("li",[t._v("线程间共享："),v("strong",[t._v("堆、堆外内存（永久代或元空间、代码缓存）")])])]),t._v(" "),v("p",[v("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-01/a475af4b17e3419c8d8db144a2e3e315.png",alt:"20201120175544"}})]),t._v(" "),v("p",[v("strong",[t._v("关于线程间共享的说明")])]),t._v(" "),v("p",[v("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-01/5e78cedef9044b2e87c0d48ca434f375.png",alt:"95f1fef0f8d101df62c2582386b4407f"}})]),t._v(" "),v("p",[v("strong",[t._v("每个JVM只有一个Runtime实例")]),t._v("。即为运行时环境，相当于内存结构的中间的那个框框：运行时环境。")]),t._v(" "),v("h2",{attrs:{id:"三、线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、线程"}},[t._v("#")]),t._v(" 三、线程")]),t._v(" "),v("h3",{attrs:{id:"_3-1-jvm线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-jvm线程"}},[t._v("#")]),t._v(" 3.1 JVM线程")]),t._v(" "),v("ul",[v("li",[t._v("线程是一个程序里的运行单元。"),v("strong",[t._v("JVM允许一个应用有多个线程并行的执行")])]),t._v(" "),v("li",[v("strong",[t._v("在Hotspot JVM里，每个线程都与操作系统的本地线程直接映射")]),t._v(" "),v("ul",[v("li",[t._v("当一个Java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。Java线程执行终止后，本地线程也会回收")])])]),t._v(" "),v("li",[t._v("操作系统负责将线程安排调度到任何一个可用的CPU上。"),v("strong",[t._v("一旦本地线程初始化成功，它就会调用Java线程中的run( )方法")])]),t._v(" "),v("li",[t._v("如果一个线程抛异常，并且该线程是进程中最后一个守护线程，那么进程将停止")])]),t._v(" "),v("h3",{attrs:{id:"_3-2-jvm系统线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-jvm系统线程"}},[t._v("#")]),t._v(" 3.2 JVM系统线程")]),t._v(" "),v("ul",[v("li",[t._v("如果你使用 jconsole 或者是任何一个调试工具，都能看到在后台有许多线程在运行。")]),t._v(" "),v("li",[v("strong",[t._v("这些后台线程不包括调用public static void main(String [ ])的main线程以及所有由这个main方法自己创建的线程。")])]),t._v(" "),v("li",[t._v("这些主要的后台系统线程在Hotspot JVM里主要是以下几个：\n"),v("ul",[v("li",[v("strong",[t._v("虚拟机线程")]),t._v('：这种线程的操作是需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的执行类型括"stop-the-world"的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销')]),t._v(" "),v("li",[v("strong",[t._v("周期任务线程")]),t._v("：这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行")]),t._v(" "),v("li",[v("strong",[t._v("GC线程")]),t._v("：这种线程对在JVM里不同种类的垃圾收集行为提供了支持（重点）")]),t._v(" "),v("li",[v("strong",[t._v("编译线程")]),t._v("：这种线程在运行时会将字节码编译成 本地代码")]),t._v(" "),v("li",[v("strong",[t._v("信号调度线程")]),t._v("：这种线程接收信号并发送给JVM，在它内部通过调用适当的方法进行处理")])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);