(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{473:function(a,v,_){"use strict";_.r(v);var t=_(42),l=Object(t.a)({},(function(){var a=this,v=a.$createElement,_=a._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"jvm与java体系结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm与java体系结构"}},[a._v("#")]),a._v(" JVM与Java体系结构")]),a._v(" "),_("h2",{attrs:{id:"一、jvm前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、jvm前言"}},[a._v("#")]),a._v(" 一、JVM前言")]),a._v(" "),_("h3",{attrs:{id:"_1-1-前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-前言"}},[a._v("#")]),a._v(" 1.1 前言")]),a._v(" "),_("blockquote",[_("p",[a._v("作为Java工程师的你曾被伤害过吗？你是否也遇到过这些问题？")])]),a._v(" "),_("ul",[_("li",[a._v("运行着的线上系统突然卡死，系统无法访问，甚至直接OOM！")]),a._v(" "),_("li",[a._v("想解决线上JVM GC问题，但却无从下手。")]),a._v(" "),_("li",[a._v("新项目上线，对各种JVM参数设置一脸茫然，直接默认吧然后就GG了")]),a._v(" "),_("li",[a._v("每次面试之前都要重新背一遍JVM的一些原理概念性的东西，然而面试官却经常问你在实际项目中如何调优VM参数，如何解决GC、OOM等问题，一脸懵逼。")])]),a._v(" "),_("p",[_("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-02-22/a5a27bd3fe3a4ef881e8fe12f9fa5c03.https://img-blog.csdnimg.cn/img_convert/feeab72bc683a4d5f8aca0356517facb.",alt:""}})]),a._v(" "),_("h3",{attrs:{id:"_1-2-开发人员的病态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-开发人员的病态"}},[a._v("#")]),a._v(" 1.2 开发人员的病态")]),a._v(" "),_("ul",[_("li",[a._v("大部分Java开发人员，除了会在项目中使用到与Java平台相关的各种高精尖技术，对于Java技术的核心Java虚拟机了解甚少。")]),a._v(" "),_("li",[a._v("一些有一定工作经验的开发人员，打心眼儿里觉得SSM、微服务等上层技术才是重点，基础技术并不重要，这其实是一种本末倒置的“病态”。如果我们把核心类库的API比做数学公式的话，那么Java虚拟机的知识就好比公式的推导过程。")]),a._v(" "),_("li",[a._v("计算机系统体系对我们来说越来越远，在不了解底层实现方式的前提下，通过高级语言很容易编写程序代码。但事实上计算机并不认识高级语言")])]),a._v(" "),_("p",[_("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-02-22/9e66094c5ca946198099a648ab862334.png",alt:"35446ef9b0c85159e0c7bae9cc94add8"}})]),a._v(" "),_("h3",{attrs:{id:"_1-3-为什么要学习jvm？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-为什么要学习jvm？"}},[a._v("#")]),a._v(" 1.3 为什么要学习JVM？")]),a._v(" "),_("ol",[_("li",[a._v("面试的需要（BATJ、TMD，PKQ等面试都爱问）")]),a._v(" "),_("li",[a._v("中高级程序员必备技能：项目管理、调优的需求")]),a._v(" "),_("li",[a._v("追求极客的精神，比如：垃圾回收算法、JIT（即时编译器）、底层原理")])]),a._v(" "),_("h3",{attrs:{id:"_1-4-java-vs-c"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-java-vs-c"}},[a._v("#")]),a._v(" 1.4 Java VS C++")]),a._v(" "),_("ul",[_("li",[a._v("垃圾收集机制为我们打理了很多繁琐的工作，大大提高了开发的效率，但是，垃圾收集也不是万能的，懂得JVM内部的内存结构、工作机制，是设计高扩展性应用和诊断运行时问题的基础，也是Java工程师进阶的必备能力。")]),a._v(" "),_("li",[a._v("C语言需要自己来分配内存和回收内存，Java全部交给JVM进行分配和回收。")])]),a._v(" "),_("h2",{attrs:{id:"二、参考图书"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、参考图书"}},[a._v("#")]),a._v(" 二、参考图书")]),a._v(" "),_("ul",[_("li",[a._v("Java虚拟机规范")]),a._v(" "),_("li",[a._v("深入理解Java虚拟机")]),a._v(" "),_("li",[a._v("深入理解JVM&G1 GC")]),a._v(" "),_("li",[a._v("解密Java虚拟机——JVM设计原理与实现")]),a._v(" "),_("li",[a._v("Java虚拟机基础教程")]),a._v(" "),_("li",[a._v("实战Java虚拟机——JVM故障诊断与性能优化")]),a._v(" "),_("li",[a._v("Java虚拟机精讲")]),a._v(" "),_("li",[a._v("码出高效——Java开发手册")])]),a._v(" "),_("h2",{attrs:{id:"三、java及jvm简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、java及jvm简介"}},[a._v("#")]),a._v(" 三、Java及JVM简介")]),a._v(" "),_("h3",{attrs:{id:"_3-1-java生态圈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-java生态圈"}},[a._v("#")]),a._v(" 3.1 Java生态圈")]),a._v(" "),_("p",[a._v("Java是目前应用最为广泛的软件开发平台之一。随着Java以及Java社区的不断壮大Java 也早已不再是简简单单的一门计算机语言了，它更是一个平台、一种文化、一个社区。")]),a._v(" "),_("ul",[_("li",[a._v("作为一个平台，Java虚拟机扮演着举足轻重的作用\n"),_("ul",[_("li",[a._v("Groovy、Scala、JRuby、Kotlin等都是Java平台的一部分")])])]),a._v(" "),_("li",[a._v('作为一种文化，Java几乎成为了"开源"的代名词。\n'),_("ul",[_("li",[a._v("第三方开源软件和框架。如Tomcat、Struts，MyBatis，Spring等。")]),a._v(" "),_("li",[a._v("就连JDK和JVM自身也有不少开源的实现，如openJDK、Harmony。")])])]),a._v(" "),_("li",[a._v("作为一个社区，Java拥有全世界最多的技术拥护者和开源社区支持，有数不清的论坛和资料。从桌面应用软件、嵌入式开发到企业级应用、后台服务器、中间件，都可以看到Java的身影。其应用形式之复杂、参与人数之众多也令人咋舌。")])]),a._v(" "),_("h3",{attrs:{id:"_3-2-java的跨平台性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-java的跨平台性"}},[a._v("#")]),a._v(" 3.2 Java的跨平台性")]),a._v(" "),_("ul",[_("li",[a._v("每个语言都需要转换成字节码文件，最后转换的字节码文件都能通过Java虚拟机进行运行和处理")]),a._v(" "),_("li",[a._v("随着Java7的正式发布，Java虚拟机的设计者们通过JSR-292规范基本实现在Java虚拟机平台上运行非Java语言编写的程序。")]),a._v(" "),_("li",[a._v("Java虚拟机根本不关心运行在其内部的程序到底是使用何种编程语言编写的，它只关心“字节码”文件。也就是说Java虚拟机拥有语言无关性，并不会单纯地与Java语言“终身绑定”，只要其他编程语言的编译结果满足并包含Java虚拟机的内部指令集、符号表以及其他的辅助信息，它就是一个有效的字节码文件，就能够被虚拟机所识别并装载运行。")])]),a._v(" "),_("p",[a._v("Java：跨平台的语言")]),a._v(" "),_("p",[_("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-02-22/e118bf28f79c41428299b0a02f9bc5b4.png",alt:"image-20210222214741114"}})]),a._v(" "),_("h3",{attrs:{id:"_3-3-字节码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-字节码"}},[a._v("#")]),a._v(" 3.3 字节码")]),a._v(" "),_("ul",[_("li",[a._v("我们平时说的java字节码，指的是用java语言编译成的字节码。准确的说任何能在jvm平台上执行的字节码格式都是一样的。所以应该统称为："),_("code",[a._v("jvm字节码")]),a._v("。")]),a._v(" "),_("li",[a._v("不同的编译器，可以编译出相同的字节码文件，字节码文件也可以在不同的JVM上运行。")]),a._v(" "),_("li",[a._v("Java虚拟机与Java语言并没有必然的联系，它只与特定的二进制文件格式——Class文件格式所关联，Class文件中包含了Java虚拟机指令集（或者称为字节码、Bytecodes）和符号表，还有一些其他辅助信息。")])]),a._v(" "),_("p",[a._v("JVM: 跨语言的平台")]),a._v(" "),_("p",[_("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-02-22/a3298b55560b4340804d2c0188a343ce.png",alt:"image-20210222214824148"}})]),a._v(" "),_("h3",{attrs:{id:"_3-4-多种语言混合编程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-多种语言混合编程"}},[a._v("#")]),a._v(" 3.4 多种语言混合编程")]),a._v(" "),_("ul",[_("li",[_("code",[a._v("Java平台上的多语言混合编程正成为主流，通过特定领域的语言去解决特定领域的问题是当前软件开发应对日趋复杂的项目需求的一个方向")]),a._v("。")]),a._v(" "),_("li",[a._v("试想一下，在一个项目之中，并行处理用Clojure语言编写，展示层使用JRuby/Rails，中间层则是Java，每个应用层都将使用不同的编程语言来完成，而且，接口对每一层的开发者都是透明的，各种语言之间的交互不存在任何困难，就像使用自己语言的原生API一样方便，因为它们最终都运行在一个虚拟机之上。")]),a._v(" "),_("li",[a._v("对这些运行于Java虚拟机之上、Java之外的语言，来自系统级的、底层的支持正在迅速增强，以JSR-292为核心的一系列项目和功能改进（如DaVinci Machine项目、Nashorn引擎、InvokeDynamic指令、java.lang.invoke包等），"),_("code",[a._v('推动Java虚拟机从"Java语言的虚拟机"向"多语言虚拟机"的方向发展')]),a._v("。")])]),a._v(" "),_("h3",{attrs:{id:"_3-5-自己实现jvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-自己实现jvm"}},[a._v("#")]),a._v(" 3.5 自己实现JVM")]),a._v(" "),_("ul",[_("li",[a._v("Java虚拟机非常复杂，要想真正理解它的工作原理，最好的方式就是自己动手编写一个！")]),a._v(" "),_("li",[a._v("自己动手写一个Java虚拟机，难吗？")]),a._v(" "),_("li",[a._v("天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣")])]),a._v(" "),_("p",[_("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-02-22/cdf87524279f42758beb4a042ee46f5f.png",alt:"ec969bca432daa43278bb9cbaf6ff7a2"}})]),a._v(" "),_("h2",{attrs:{id:"四、java发展的重大事件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、java发展的重大事件"}},[a._v("#")]),a._v(" 四、Java发展的重大事件")]),a._v(" "),_("ul",[_("li",[a._v("1990年，在Sun计算机公司中，由Patrick Naughton、MikeSheridan及James Gosling领导的小组Green Team，开发出的新的程序语言，命名为Oak，后期命名为Java")]),a._v(" "),_("li",[a._v("1995年，Sun正式发布Java和HotJava产品，Java首次公开亮相。")]),a._v(" "),_("li",[a._v("1996年1月23日Sun Microsystems发布了JDK 1.0。")]),a._v(" "),_("li",[a._v("1998年，JDK1.2版本发布。同时，Sun发布了JSP/Servlet、EJB规范，以及将Java分成了J2EE、J2SE和J2ME。这表明了Java开始向企业、桌面应用和移动设备应用3大领域挺进。")]),a._v(" "),_("li",[a._v("2000年，JDK1.3发布，"),_("code",[a._v("Java HotSpot Virtual Machine正式发布，成为Java的默认虚拟机。")])]),a._v(" "),_("li",[a._v("2002年，JDK1.4发布，古老的Classic虚拟机退出历史舞台。")]),a._v(" "),_("li",[a._v("2003年年底，"),_("code",[a._v("Java平台的scala正式发布，同年Groovy也加入了Java阵营。")])]),a._v(" "),_("li",[a._v("2004年，JDK1.5发布。同时JDK1.5改名为JavaSE5.0。")]),a._v(" "),_("li",[a._v("2006年，JDK6发布。同年，"),_("code",[a._v("Java开源并建立了OpenJDK")]),a._v("。顺理成章，"),_("code",[a._v("Hotspot虚拟机也成为了OpenJDK中的默认虚拟机。")])]),a._v(" "),_("li",[a._v("2007年，"),_("code",[a._v("Java平台迎来了新伙伴Clojure。")])]),a._v(" "),_("li",[a._v("2008年，oracle收购了BEA，"),_("code",[a._v("得到了JRockit虚拟机。")])]),a._v(" "),_("li",[a._v("2009年，Twitter宣布把后台大部分程序从Ruby迁移到Scala，这是Java平台的又一次大规模应用。")]),a._v(" "),_("li",[a._v("2010年，Oracle收购了Sun，"),_("code",[a._v("获得Java商标和最真价值的HotSpot虚拟机")]),a._v("。此时，Oracle拥有市场占用率最高的两款虚拟机HotSpot和JRockit，并计划在未来对它们进行整合：HotRockit")]),a._v(" "),_("li",[a._v("2011年，JDK7发布。在JDK1.7u4中，"),_("code",[a._v("正式启用了新的垃圾回收器G1。")])]),a._v(" "),_("li",[a._v("2017年，JDK9发布。将G1设置为默认GC，替代CMS")]),a._v(" "),_("li",[a._v("同年，"),_("code",[a._v("IBM的J9开源")]),a._v("，形成了现在的Open J9社区")]),a._v(" "),_("li",[a._v("2018年，Android的Java侵权案判决，Google赔偿Oracle计88亿美元")]),a._v(" "),_("li",[a._v("同年，Oracle宣告JavagE成为历史名词JDBC、JMS、Servlet赠予Eclipse基金会")]),a._v(" "),_("li",[a._v("同年，JDK11发布，LTS版本的JDK，"),_("code",[a._v("发布革命性的ZGC，调整JDK授权许可")])]),a._v(" "),_("li",[a._v("2019年，JDK12发布，加入RedHat领导开发的"),_("code",[a._v("Shenandoah GC")])])]),a._v(" "),_("p",[_("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-02-22/ec2db46ba287440e8260319df95899b9.png",alt:"fe9e92090d381be838f06c0504f92db5"}})]),a._v(" "),_("p",[a._v("在JDK11之前，OracleJDK中还会存在一些OpenJDK中没有的、闭源的功能。但在JDK11中，可以认为OpenJDK与OracleJDK代码实质上已经完全一致。")]),a._v(" "),_("h2",{attrs:{id:"五、虚拟机与java虚拟机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五、虚拟机与java虚拟机"}},[a._v("#")]),a._v(" 五、虚拟机与Java虚拟机")]),a._v(" "),_("p",[a._v("所谓虚拟机（Virtual Machine），就是一台"),_("code",[a._v("虚拟的计算机")]),a._v("。它是一款"),_("code",[a._v("软件")]),a._v("，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为"),_("code",[a._v("系统虚拟机")]),a._v("和"),_("code",[a._v("程序虚拟机")]),a._v("。")]),a._v(" "),_("ul",[_("li",[a._v("大名鼎鼎的Virtual Box，VMware就属于系统虚拟机，它们完全是对物理计算机的仿真，提供了一个可运行完整操作系统的软件平台。")]),a._v(" "),_("li",[a._v("程序虚拟机的典型代表就是"),_("code",[a._v("Java虚拟机")]),a._v("，它专门为执行单个计算机程序而设计，在Java虚拟机中执行的指令我们称为Java字节码指令。")]),a._v(" "),_("li",[a._v("无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中。")])]),a._v(" "),_("p",[a._v("Java虚拟机")]),a._v(" "),_("ul",[_("li",[a._v("Java虚拟机是一台执行Java字节码的虚拟计算机，它拥有独立的运行机制，其运行的Java字节码也未必由Java语言编译而成。")]),a._v(" "),_("li",[a._v("JVM平台的各种语言可以共享Java虚拟机带来的跨平台性、优秀的垃圾回器，以及可靠的即时编译器。")]),a._v(" "),_("li",[a._v("Java技术的核心就是Java虚拟机（JVM，Java Virtual Machine），因为所有的Java程序都运行在Java虚拟机内部。")]),a._v(" "),_("li",[a._v("Java虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条Java指令，Java虚拟机规范中都有详细定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里。")])]),a._v(" "),_("p",[a._v("特点：")]),a._v(" "),_("ol",[_("li",[a._v("一次编译，到处运行")]),a._v(" "),_("li",[a._v("自动内存管理")]),a._v(" "),_("li",[a._v("自动垃圾回收功能")])]),a._v(" "),_("p",[a._v("JVM的位置：")]),a._v(" "),_("blockquote",[_("p",[a._v("JVM是运行在操作系统之上的，它与硬件没有直接的交互")])]),a._v(" "),_("p",[_("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-02-22/f525343f9faf457984bc616c0b8963eb.png",alt:"336a400ae9e87411ec1fa9151316f40e"}})]),a._v(" "),_("p",[a._v("Java的体系结构")]),a._v(" "),_("p",[_("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-02-22/b916386e63164b59891fb4f7ed1782ea.png",alt:"4a1e986875b97026f5cb9ef32aff07c9"}})]),a._v(" "),_("h2",{attrs:{id:"六、jvm的整体结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#六、jvm的整体结构"}},[a._v("#")]),a._v(" 六、JVM的整体结构")]),a._v(" "),_("ul",[_("li",[_("code",[a._v("HotSpot VM")]),a._v("是目前市面上高性能虚拟机的代表作之一。")]),a._v(" "),_("li",[a._v("它采用解释器与即时编译器并存的架构。")]),a._v(" "),_("li",[a._v("在今天，Java程序的运行性能早已脱胎换骨，已经达到了可以和C/C++程序一较高下的地步。")]),a._v(" "),_("li",[a._v("执行引擎包含三部分："),_("code",[a._v("解释器")]),a._v("，"),_("code",[a._v("即时编译器")]),a._v("，"),_("code",[a._v("垃圾回收器")])])]),a._v(" "),_("p",[_("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-02-22/47c14e8480b048de8ae912c93a48a7e2.png",alt:"bfc18bc920d2531793d6f3cc87499ccb"}})]),a._v(" "),_("h2",{attrs:{id:"七、java代码执行流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#七、java代码执行流程"}},[a._v("#")]),a._v(" 七、Java代码执行流程")]),a._v(" "),_("p",[_("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-02-22/277f72b9e05b400f835ab89a4184b2a3.png",alt:"20201118095710"}})]),a._v(" "),_("h2",{attrs:{id:"八、jvm的架构模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#八、jvm的架构模型"}},[a._v("#")]),a._v(" 八、JVM的架构模型")]),a._v(" "),_("p",[a._v("Java编译器输入的指令流基本上是一种"),_("code",[a._v("基于栈的指令集架构")]),a._v("，另外一种指令集架构则是"),_("code",[a._v("基于寄存器的指令集架构")]),a._v("。具体来说：这两种架构之间的区别：")]),a._v(" "),_("ul",[_("li",[a._v("基于栈式架构的特点\n"),_("ul",[_("li",[a._v("设计和实现更简单，适用于资源受限的系统")]),a._v(" "),_("li",[a._v("避开了寄存器的分配难题：使用零地址指令方式分配")]),a._v(" "),_("li",[a._v("指令流中的指令大部分是零地址指令，其执行过程依赖于"),_("code",[a._v("操作栈")]),a._v("。"),_("code",[a._v("指令集更小，编译器容易实现")])]),a._v(" "),_("li",[a._v("不需要硬件支持，可移植性更好，更好"),_("code",[a._v("实现跨平台")])])])]),a._v(" "),_("li",[a._v("基于寄存器架构的特点\n"),_("ul",[_("li",[a._v("典型的应用是x86的二进制指令集：比如传统的PC以及Android的Davlik虚拟机。")]),a._v(" "),_("li",[a._v("指令集架构则"),_("code",[a._v("完全依赖硬件")]),a._v("，与硬件的耦合度高，"),_("code",[a._v("可移植性差")])]),a._v(" "),_("li",[_("code",[a._v("性能优秀和执行更高效")])]),a._v(" "),_("li",[a._v("花费更少的指令去完成一项操作")]),a._v(" "),_("li",[a._v("在大部分情况下，"),_("code",[a._v("基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主")]),a._v("，而基于栈式架构的指令集却是以零地址指令为主")])])]),a._v(" "),_("li",[a._v("总结\n"),_("ul",[_("li",[a._v("由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令")]),a._v(" "),_("li",[a._v("时至今日，尽管嵌入式平台已经不是Java程序的主流运行平台了（准确来说应该是HotSpot VM的宿主环境已经不局限于嵌入式平台了），那么为什么不将架构更换为基于寄存器的架构呢？")]),a._v(" "),_("li",[a._v("因为基于栈的架构跨平台性好、指令集小，虽然相对于基于寄存器的架构来说，基于栈的架构编译得到的指令更多，执行性能也不如基于寄存器的架构好，但考虑到其跨平台性与移植性，我们还是选用栈的架构")]),a._v(" "),_("li",[a._v("栈：跨平台性、指令集小、指令多；执行性能比寄存器差")])])])]),a._v(" "),_("h2",{attrs:{id:"九、jvm的生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#九、jvm的生命周期"}},[a._v("#")]),a._v(" 九、JVM的生命周期")]),a._v(" "),_("ul",[_("li",[a._v("虚拟机的启动\n"),_("ul",[_("li",[a._v("Java虚拟机的启动是通过"),_("code",[a._v("引导类加载器")]),a._v("（bootstrap class loader）创建一个初始类（initial class）来完成的，这个类是由虚拟机的具体实现指定的。")])])]),a._v(" "),_("li",[a._v("虚拟机的执行\n"),_("ul",[_("li",[a._v("一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序")]),a._v(" "),_("li",[a._v("程序开始执行时他才运行，程序结束时他就停止")]),a._v(" "),_("li",[_("code",[a._v("执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程")])])])]),a._v(" "),_("li",[a._v("虚拟机的退出\n"),_("ul",[_("li",[a._v("程序正常执行结束")]),a._v(" "),_("li",[a._v("程序在执行过程中遇到了异常或错误而异常终止")]),a._v(" "),_("li",[a._v("由于操作系统用现错误而导致Java虚拟机进程终止")]),a._v(" "),_("li",[a._v("某线程调用Runtime类或"),_("code",[a._v("System类的exit( )")]),a._v("方法，或"),_("code",[a._v("Runtime类的halt( )")]),a._v("方法，并且Java安全管理器也允许这次exit( )或halt( )操作。")]),a._v(" "),_("li",[a._v("除此之外，JNI（Java Native Interface）规范描述了用JNI Invocation API来加载或卸载 Java虚拟机时，Java虚拟机的退出情况。")])])])]),a._v(" "),_("h2",{attrs:{id:"十、jvm的发展历程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#十、jvm的发展历程"}},[a._v("#")]),a._v(" 十、JVM的发展历程")])])}),[],!1,null,null,null);v.default=l.exports}}]);