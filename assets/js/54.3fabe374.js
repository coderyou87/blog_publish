(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{456:function(a,t,e){"use strict";e.r(t);var s=e(42),c=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"cas"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cas"}},[a._v("#")]),a._v(" CAS")]),a._v(" "),e("h2",{attrs:{id:"_2-1-cas-compareandswap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-cas-compareandswap"}},[a._v("#")]),a._v(" 2.1 CAS: CompareAndSwap")]),a._v(" "),e("p",[a._v("CAS的全称是Compare-And-Swap，它是一条CPU并发原语。")]),a._v(" "),e("p",[a._v("它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的。")]),a._v(" "),e("p",[a._v("CAS并发原语体现在JAVA语言中就是sun.misc.Unsafe类中的各个方法。调用UnSafe类中的CAS方法，JVM会帮我们实现出CAS汇编指令，这只一种完全依赖于硬件的功能，通过它实现了原子操作。由于CAS是一种系统原语，原语属于操作系统用语范围，是由若干条指令组成的，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不予许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致问题。")]),a._v(" "),e("ol",[e("li",[a._v("各个线程在操作前，先从主内存拷贝变量到各自的工作内存。")]),a._v(" "),e("li",[a._v("各个线程在更新变量前（写回主内存），先用上次从主内存中拷贝的变量值与当前主内存中的值比较，如果相等，则更新成功；否则，更新失败。")]),a._v(" "),e("li",[a._v("更新成功后，返回更新后的值；更新失败后，返回当前主内存中的值。")])]),a._v(" "),e("h2",{attrs:{id:"_2-2-unsafe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-unsafe"}},[a._v("#")]),a._v(" 2.2 UnSafe")]),a._v(" "),e("p",[a._v("UnSafe是rt.jar中的一个类。")]),a._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"img",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2020-08-01/79af11bea9bd4fb3877fe6cfc81091c8.png"}},[e("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2020-08-01/79af11bea9bd4fb3877fe6cfc81091c8.png",alt:"img"}})])]),a._v(" "),e("ol",[e("li",[e("p",[a._v("UnSafe")]),a._v(" "),e("p",[a._v("是CAS的核心类，由于Java方法无法直接访问底层系统，需要通过本地（native）方法来访问，UnSafe相当于一个后门，基于类可以直接操作特定内存的数据。UnSafe类存在于sun.misc包中，其内存方法操作可以像C的指针一样直接操作内存，因为JavaCAS操作的执行依赖于UnSafe类的方法。注意：UnSafe类中的所有方法都是native修饰的，也就是说UnSafe类中的方法都是直接调用操作系统底层资源执行相应任务。")])]),a._v(" "),e("li",[e("p",[a._v("变量valueOffset，表示该变量值在内存中的偏移地址，因为Unsafe就是根据内存偏移地址获取数据的。")])])]),a._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"img",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2020-08-01/2dcc6e4b5bcc47278762514e405df85e.png"}},[e("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2020-08-01/2dcc6e4b5bcc47278762514e405df85e.png",alt:"img"}})])]),a._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[a._v("变量value用Volatile修饰，保证了多线程之间的内存可见性")])]),a._v(" "),e("p",[a._v("在AtomicInteger类中，有两个相似的方法，getAndAdd与addAndGet。不同之处是，addAndGet会在调用getAndAddInt方法后，再加上delta。")]),a._v(" "),e("h2",{attrs:{id:"_2-3-cas缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-cas缺点"}},[a._v("#")]),a._v(" 2.3 CAS缺点")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("循环时间长，开销很大")]),a._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"image-20200801224100239",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2020-08-01/25b5cab0583745c58f832d74d82962f1.png"}},[e("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2020-08-01/25b5cab0583745c58f832d74d82962f1.png",alt:"image-20200801224100239"}})])]),a._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"image-20200801224112926",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2020-08-01/b8831400eba4465582b13671ebff8261.png"}},[e("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2020-08-01/b8831400eba4465582b13671ebff8261.png",alt:"image-20200801224112926"}})])]),a._v(" "),e("p",[a._v("在GetAndAddInt方法中，存在一个do while，如果CAS更新失败，会一直尝试更新，CPU的消耗会很大。")])]),a._v(" "),e("li",[e("p",[a._v("只能保证一个共享变量的原子操作")]),a._v(" "),e("p",[a._v("当对一个共享变量执行操作时，可以使用循环CAS的方式，保证原子性；当对多个共享变量操作时，可以使用锁来保证原子性。java从JDK1.5开始提供了AtomicReference类来保证引用对象之间的原子性，可以将多个变量放在一个对象里来进行CAS操作。")])]),a._v(" "),e("li",[e("p",[a._v("存在ABA问题")]),a._v(" "),e("ol",[e("li",[a._v("线程A与线程B同时读取主内存中的值：value=3")]),a._v(" "),e("li",[a._v("线程A一直在做运算")]),a._v(" "),e("li",[a._v("线程B将value更改为4")]),a._v(" "),e("li",[a._v("线程B再将value更改为3")]),a._v(" "),e("li",[a._v("线程A运算完成，向主内存写回数据，返回主内存中的值为3,以为自己运算期间，没有线程对value进行过更改。这种问题被称为ABA问题，在某些场景下存在安全隐患。")])])])])])}),[],!1,null,null,null);t.default=c.exports}}]);