(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{376:function(a,t,s){"use strict";s.r(t);var e=s(42),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"执行引擎"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行引擎"}},[a._v("#")]),a._v(" 执行引擎")]),a._v(" "),s("h2",{attrs:{id:"一、执行引擎概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、执行引擎概述"}},[a._v("#")]),a._v(" 一、执行引擎概述")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("执行引擎是Java虚拟机的核心组成部分之一")])]),a._v(" "),s("li",[s("p",[a._v("虚拟机是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地"),s("strong",[a._v("定制指令集与执行引擎的结构体系")]),a._v("，"),s("strong",[a._v("能够执行那些不被硬件直接支持的指令集格式")]),a._v("。")])]),a._v(" "),s("li",[s("p",[a._v("JVM的主要任务是"),s("strong",[a._v("负责装载字节码到其内部")]),a._v("，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM所识别的"),s("strong",[a._v("字节码指令、符号表和其他辅助信息")])])]),a._v(" "),s("li",[s("p",[a._v("如果想让一个Java程序运行起来，就需要执行引擎将字节码解释、编译为对应平台上的本地机器指令。JVM中的执行引擎的主要任务就是将高级语言翻译为机器语言。")])]),a._v(" "),s("li",[s("p",[a._v("执行引擎的工作过程")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("从外观上来看，所有的Java虚拟机的执行引擎输入、输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行结果。")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210306150436302",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/48e8337ff67e4f168c2b60756128bc9c.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/48e8337ff67e4f168c2b60756128bc9c.png",alt:"image-20210306150436302"}})])])]),a._v(" "),s("li",[s("p",[a._v("执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器。")])]),a._v(" "),s("li",[s("p",[a._v("每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址。")])]),a._v(" "),s("li",[s("p",[a._v("当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息。")])])])])]),a._v(" "),s("h2",{attrs:{id:"二、java代码编译和执行过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、java代码编译和执行过程"}},[a._v("#")]),a._v(" 二、Java代码编译和执行过程")]),a._v(" "),s("p",[a._v("大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过下面图中的各个步骤：")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210306150711361",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/041566e87514485a801640d30c76c688.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/041566e87514485a801640d30c76c688.png",alt:"image-20210306150711361"}})])]),a._v(" "),s("p",[a._v("Java代码编译是由Java源码编译器来完成，流程图如下所示：")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210306150754696",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/c84626b0d01c4ab28f102160fab041ee.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/c84626b0d01c4ab28f102160fab041ee.png",alt:"image-20210306150754696"}})])]),a._v(" "),s("p",[a._v("Java字节码的执行是由JVM执行引擎来完成，流程图如下所示：")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210306150836635",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/1c286c7b4d1347d1801f2134cf31b8cd.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/1c286c7b4d1347d1801f2134cf31b8cd.png",alt:"image-20210306150836635"}})])]),a._v(" "),s("p",[s("strong",[a._v("什么是解释器（Interpreter），什么是JIT编译器")])]),a._v(" "),s("p",[s("strong",[a._v("解释器")]),a._v("：当Java虚拟机启动时会根据预定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行。")]),a._v(" "),s("p",[s("strong",[a._v("JIT （Just In Time Compiler）编译器（即时编译器）")]),a._v("：就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言。")]),a._v(" "),s("p",[s("strong",[a._v("为什么说Java是半编译半解释型语言？")])]),a._v(" "),s("p",[a._v("JDK1.0时代，将Java语言定位为“解释执行”还是比较准确的。再后来，Java也发展出可以直接生成本地代码的编译器。\n现在JVM在执行Java代码的时候，通常都会将解释执行与编译执行二者结合起来进行。")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"img",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/50b1ad38bce04296872db487ca9bca12.io/2020/6/8/172933531eb0cea7"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/50b1ad38bce04296872db487ca9bca12.io/2020/6/8/172933531eb0cea7",alt:"img"}})])]),a._v(" "),s("h2",{attrs:{id:"三、机器码、指令、汇编语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、机器码、指令、汇编语言"}},[a._v("#")]),a._v(" 三、机器码、指令、汇编语言")]),a._v(" "),s("h3",{attrs:{id:"_3-1-机器码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-机器码"}},[a._v("#")]),a._v(" 3.1 机器码")]),a._v(" "),s("ul",[s("li",[a._v("各种用二进制编码方式表示的指令，叫做 "),s("strong",[a._v("机器指令码")]),a._v("。")]),a._v(" "),s("li",[a._v("机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错。")]),a._v(" "),s("li",[a._v("用它编写的程序一经输入计算机，CPU直接读取运行，因此和其他语言编的程序相比，执行速度最快。")]),a._v(" "),s("li",[a._v("机器指令与CPU紧密相关，所以不同种类的CPU所对应的机器指令也就不同。")])]),a._v(" "),s("h3",{attrs:{id:"_3-2-指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-指令"}},[a._v("#")]),a._v(" 3.2 指令")]),a._v(" "),s("ul",[s("li",[a._v("由于机器码是有0和1组成的二进制序列，可读性实在太差，于是人们发明了指令。")]),a._v(" "),s("li",[a._v("指令就是把机器码中特定的0和1序列，简化成对应的指令（一般为英文简写，如mov，inc等），可读性稍好")]),a._v(" "),s("li",[a._v("由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同的硬件平台的同一种指令（比如mov），对应的机器码也可能不同。")])]),a._v(" "),s("h4",{attrs:{id:"_3-2-1-指令集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-指令集"}},[a._v("#")]),a._v(" 3.2.1 指令集")]),a._v(" "),s("ul",[s("li",[a._v("不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集。")]),a._v(" "),s("li",[a._v("常见的指令集与平台\n"),s("ul",[s("li",[a._v("x86指令集，对应的是x86架构的平台")]),a._v(" "),s("li",[a._v("ARM指令集，对应的是ARM架构的平台")])])])]),a._v(" "),s("h3",{attrs:{id:"_3-3-汇编语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-汇编语言"}},[a._v("#")]),a._v(" 3.3 汇编语言")]),a._v(" "),s("ul",[s("li",[a._v("由于指令的可读性还是太差，于是人们又发明了汇编语言。")]),a._v(" "),s("li",[a._v("在汇编语言中，用助记符（Mnemonics）代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址。")]),a._v(" "),s("li",[a._v("在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。\n"),s("ul",[s("li",[a._v("由于计算机只认识指令码，所以用汇编语言编写的程序还必须翻译成机器指令码，计算机才能识别和执行。")])])])]),a._v(" "),s("h3",{attrs:{id:"_3-4-高级语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-高级语言"}},[a._v("#")]),a._v(" 3.4 高级语言")]),a._v(" "),s("ul",[s("li",[a._v("为了使计算机用户编程序更容易些，后来就出现了各种高级计算机语言。高级语言比机器语言、汇编语言更接近人的语言")]),a._v(" "),s("li",[a._v("当计算机执行高级语言编写的程序时，仍然需要把程序解释和编译成机器的指令码。完成这个过程的程序就叫做解释程序或编译程序。")])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210306152908734",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/704d259323364485838265f6f6129486.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/704d259323364485838265f6f6129486.png",alt:"image-20210306152908734"}})])]),a._v(" "),s("h4",{attrs:{id:"_3-4-1-字节码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-字节码"}},[a._v("#")]),a._v(" 3.4.1 字节码")]),a._v(" "),s("ul",[s("li",[a._v("字节码是一种中间状态（中间码）的二进制代码（文件），它比机器码更抽象，需要直译器转译后才能成为机器码")]),a._v(" "),s("li",[a._v("字节码主要为了实现特定软件运行和软件环境、与硬件环境无关。")]),a._v(" "),s("li",[a._v("字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。\n"),s("ul",[s("li",[a._v("字节码的典型应用为Java bytecode")])])])]),a._v(" "),s("h4",{attrs:{id:"_3-4-2-c、c-源程序执行过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-c、c-源程序执行过程"}},[a._v("#")]),a._v(" 3.4.2 C、C++源程序执行过程")]),a._v(" "),s("p",[a._v("编译过程又可以分成两个阶段：编译和汇编。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("编译过程：是读取源程序（字符流），对 之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码")])]),a._v(" "),s("li",[s("p",[a._v("汇编过程：实际上指把汇编语言代码翻译成目标机器指令的过程。")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210306153132690",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/fbddc4a03177460b882a25cf1eb8631c.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/fbddc4a03177460b882a25cf1eb8631c.png",alt:"image-20210306153132690"}})])])])]),a._v(" "),s("h2",{attrs:{id:"四、解释器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、解释器"}},[a._v("#")]),a._v(" 四、解释器")]),a._v(" "),s("p",[a._v("JVM设计者们的初衷仅仅只是单纯地为了==满足Java程序实现跨平台特性==，因此避免采用静态编译的方式直接生成本地机器指令，从而诞生了实现解释器在运行时采用逐行解释字节码执行程序的想法。")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210306153252776",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/0afc6bd90f90432f8aec2ed569746bf1.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/0afc6bd90f90432f8aec2ed569746bf1.png",alt:"image-20210306153252776"}})])]),a._v(" "),s("ul",[s("li",[a._v("解释器真正意义上所承担的角色就是一个运行时“翻译者”，将字节码文件中的内容“翻译”为对应平台的本地机器指令执行。")]),a._v(" "),s("li",[a._v("当一条字节码指令被解释执行完成后，接着再根据PC寄存器中记录的下一条需要被执行的字节码指令执行解释操作。")])]),a._v(" "),s("p",[a._v("在Java的发展历史里，一共有两套解释执行器，即古老的==字节码解释器==、现在普遍使用的==模板解释器==。")]),a._v(" "),s("ul",[s("li",[a._v("字节码解释器在执行时通过纯软件代码模拟字节码的执行，效率非常低下。而模板解释器将每一 条字节码和一个模板函数相关联，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能。")]),a._v(" "),s("li",[a._v("在HotSpot VM中，解释器主要由Interpreter模块和Code模块构成。\n"),s("ul",[s("li",[a._v("Interpreter模块：实现了解释器的核心功能")]),a._v(" "),s("li",[a._v("Code模块：用于管理HotSpot VM在运行时生成的本地机器指令")])])])]),a._v(" "),s("p",[s("strong",[a._v("解释器现状")])]),a._v(" "),s("ul",[s("li",[a._v("由于解释器在设计和实现上非常简单，因此除了Java语言之外，还有许多高级语言同样也是基于解释器执行的，比如Python、 Perl、Ruby等。但是在今天，基于解释器执行已经沦落为低效的代名词，并且时常被一些C/C+ +程序员所调侃。")]),a._v(" "),s("li",[a._v("为了解决这个问题，JVM平台支持一种叫作即时编译的技术。即时编译的目的是避免函数被解释执行，而是将整个函数体编译成为机器码，每次函数执行时，只执行编译后的机器码即可，这种方式可以使执行效率大幅度提升。")]),a._v(" "),s("li",[a._v("不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献。")])]),a._v(" "),s("h2",{attrs:{id:"五、jit编译器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、jit编译器"}},[a._v("#")]),a._v(" 五、JIT编译器")]),a._v(" "),s("h3",{attrs:{id:"_5-1-hotspot-vm-为何解释器与jit编译器共存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-hotspot-vm-为何解释器与jit编译器共存"}},[a._v("#")]),a._v(" 5.1 HotSpot VM 为何解释器与JIT编译器共存")]),a._v(" "),s("p",[a._v("java代码的执行分类：")]),a._v(" "),s("ul",[s("li",[a._v("第一种是将源代码编译成字节码文件，然后再运行时通过解释器将字节码文件转为机器码执行")]),a._v(" "),s("li",[a._v("第二种是编译执行（直接编译成机器码）。现代虚拟机为了提高执行效率，会使用即时编译技术（JIT,Just In Time）将方法编译成机器码后再执行")])]),a._v(" "),s("p",[a._v("HotSpot VM是目前市面上高性能虛拟机的代表作之一。它采用==解释器与即时编译器并存的架构==。在Java虛拟机运行时，解释器和即时编译器能够相互协作，各自取长补短，尽力去选择最合适的方式来权衡编译本地代码的时间和直接解释执行代码的时间。")]),a._v(" "),s("p",[a._v("在今天，Java程序的运行性能早已脱胎换骨，已经达到了可以和C/C++程序一较高下的地步。")]),a._v(" "),s("h4",{attrs:{id:"_5-1-1-解释器依然存在的必要性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-1-解释器依然存在的必要性"}},[a._v("#")]),a._v(" 5.1.1 解释器依然存在的必要性")]),a._v(" "),s("p",[a._v("有些开发人员会感觉到诧异，既然HotSpotVM中已经内置JIT编译器了，那么为什么还需要再使用解释器来“拖累”程序的执行性能呢？比如JRockit VM内部就不包含解释器，字节码全部都依靠即时编译器编译后执行。")]),a._v(" "),s("p",[a._v("当程序启动后，解释器可以马上发挥作用，省去编译的时间，立即执行。 编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间。但编译为本地代码后，执行效率高。")]),a._v(" "),s("p",[a._v("尽管JRockitVM中程序的执行性能会非常高效，但程序在启动时必然需要花费更长的时间来进行编译。对于服务端应用来说，启动时间并非是关注重点，但对于那些看中启动时间的应用场景而言，或许就需要采用解释器与即时编译器并存的架构来换取一一个平衡点。在此模式下，==当Java虚拟器启动时，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成后再执行，这样可以省去许多不必要的编译时间。随着时间的推移，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率。==")]),a._v(" "),s("p",[a._v("同时，解释执行在编译器进行激进优化不成立的时候，作为编译器的“逃生门”。")]),a._v(" "),s("h4",{attrs:{id:"_5-1-2hostspot-jvm的执行方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-2hostspot-jvm的执行方式"}},[a._v("#")]),a._v(" 5.1.2HostSpot JVM的执行方式")]),a._v(" "),s("p",[a._v("当虛拟机启动的时候，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成再执行，这样可以省去许多不必要的编译时间。并且随着程序运行时间的推移，即时编译器逐渐发挥作用，==根据热点探测功能，将有价值的字节码编译为本地机器指令，以换取更高的程序执行效率。==")]),a._v(" "),s("p",[s("strong",[a._v("案例")])]),a._v(" "),s("p",[a._v("注意解释执行与编译执行在线上环境微妙的辩证关系。机器在热机状态可以承受的负载要大于冷机状态。如果以热机状态时的流量进行切流，可能使处于冷机状态的服务器因无法承载流量而假死。\n 在生产环境发布过程中，以分批的方式进行发布，根据机器数量划分成多个批次，每个批次的机器数至多占到整个集群的1/8。曾经有这样的故障案例：某程序员在发布平台进行分批发布，在输入发布总批数时，误填写成分为两批发布。如果是热机状态，在正常情况下一半的机器可以勉强承载流量，但由于刚启动的JVM均是解释执行，还没有进行热点代码统计和JIT动态编译，导致机器启动之后，当前1/2发布成功的服务器马上全部宕机，此故障说明了JIT的存在。")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210306161058061",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/a9d651b958244b7e8d20dea32f8ea711.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/a9d651b958244b7e8d20dea32f8ea711.png",alt:"image-20210306161058061"}})])]),a._v(" "),s("h3",{attrs:{id:"_5-2-jit编译器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-jit编译器"}},[a._v("#")]),a._v(" 5.2 JIT编译器")]),a._v(" "),s("h4",{attrs:{id:"概念解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念解释"}},[a._v("#")]),a._v(" 概念解释")]),a._v(" "),s("ul",[s("li",[a._v("Java 语言的“编译器” 其实是一段“不确定”的操作过程，因为它可能是指一个==前端编译器==（其实叫“编译器的前端” 更准确一些）把.java文件转变成.class文件的过程；")]),a._v(" "),s("li",[a._v("也可能是指虚拟机的==后端运行期编译器==（JIT 编译器，Just In Time Compiler）把字节码转变成机器码的过程。")]),a._v(" "),s("li",[a._v("还可能是指使用==静态提前编译器==（AOT 编译器，Ahead Of Time Compiler）直接把. java文件编译成本地机器代码的过程。")])]),a._v(" "),s("ul",[s("li",[a._v("前端编译器： Sun的Javac、 Eclipse JDT中的增量式编译器（ECJ）")]),a._v(" "),s("li",[a._v("JIT编译器： HotSpot VM的C1、C2编译器")]),a._v(" "),s("li",[a._v("AOT编译器： GNU Compiler for the Java （GCJ） 、Excelsior JET。")])]),a._v(" "),s("h4",{attrs:{id:"热点代码及探测方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#热点代码及探测方式"}},[a._v("#")]),a._v(" 热点代码及探测方式")]),a._v(" "),s("p",[a._v("当然是否需要启动JIT编译器将字节码直接编译为对应平台的本地机器指令，则需要根据代码被调用执行的频率而定。关于那些需要被编译为本地代码的字节码，也被称之为“热点代码” ，JIT编译器在运行时会针对那些频繁被调用的“热点代码”做出深度优化，将其直接编译为对应平台的本地机器指令，以此提升Java程序的执行性能。")]),a._v(" "),s("ul",[s("li",[a._v("一个被多次调用的方法，或者是一个方法体内部循环次数较多的循环体都可以被称之为“热点代码”，因此都可以通过JIT编译器编译为本地机器指令。由于这种编译方式发生在方法的执行过程中，因此也被称之为栈上替换，或简称为OSR （On StackReplacement）编译。")]),a._v(" "),s("li",[a._v("一个方法究竟要被调用多少次，或者一个循环体究竟需要执行多少次循环才可以达到这个标准？必然需要一个明确的阈值，JIT编译器才会将这些“热点代码”编译为本地机器指令执行。这里主要依靠==热点探测功能==。")]),a._v(" "),s("li",[a._v("==目前HotSpot VM所采用的热点探测方式是基于计数器的热点探测==。")]),a._v(" "),s("li",[a._v("采用基于计数器的热点探测，HotSpot VM将会为每一个 方法都建立2个不同类型的计数器，分别为方法调用计数器（Invocation Counter） 和回边计数器（BackEdge Counter） 。\n"),s("ul",[s("li",[a._v("方法调用计数器用于统计方法的调用次数")]),a._v(" "),s("li",[a._v("回边计数器则用于统计循环体执行的循环次数")])])])]),a._v(" "),s("h4",{attrs:{id:"方法调用计数器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法调用计数器"}},[a._v("#")]),a._v(" 方法调用计数器")]),a._v(" "),s("ul",[s("li",[a._v("这个计数器就用于统计方法被调用的次数，它的默认阈值在Client 模式 下是1500 次，在Server 模式下是10000 次。超过这个阈值，就会触发JIT编译。")]),a._v(" "),s("li",[a._v("这个阈值可以通过虚拟机参数一XX ：CompileThreshold来人为设定。")]),a._v(" "),s("li",[a._v("当一个方法被调用时， 会先检查该方法是否存在被JIT编译过的版本，如 果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的版本，则将此方法的调用计数器值加1，然后判断方法调用计数器与回边计数器值之和是否超过方法调用计数器的阈值。如果已超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求。")])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210306164115236",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/4d20d60b7e7646ce828a79f1c290cc7f.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/4d20d60b7e7646ce828a79f1c290cc7f.png",alt:"image-20210306164115236"}})])]),a._v(" "),s("p",[s("strong",[a._v("热度衰减")])]),a._v(" "),s("ul",[s("li",[a._v("如果不做任何设置，方法调用计数器统计的并不是方法被调用的绝对次数，而是一一个相对的执行频率，即一段时间之内方法被调用的次数。当超过一定的时间限度， 如果方法的调用次数仍然不足以让它提交给即时编译器编译，那这个方法的调用计数器就会被减少一半，这个过程称为方法调用计数器热度的衰减（Counter Decay） ，而这段时间就称为此方法统计的半衰周期（Counter Half Life Time）。")]),a._v(" "),s("li",[a._v("进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数 ==-XX：-UseCounterDecay==来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码。")]),a._v(" "),s("li",[a._v("另外， 可以使用==-XX:CounterHalfLifeTime==参数设置半衰周期的时间，单位是秒。")])]),a._v(" "),s("p",[s("strong",[a._v("回边计数器")])]),a._v(" "),s("p",[a._v("它的作用是统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为“回边” （Back Edge）。显然，建立回边计数器统计的目的就是为了触发OSR编译。")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210306164516632",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/35e04943faa447118faa1a6220f856f6.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/35e04943faa447118faa1a6220f856f6.png",alt:"image-20210306164516632"}})])]),a._v(" "),s("h4",{attrs:{id:"hotspot-vm-可以设置程序执行方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hotspot-vm-可以设置程序执行方式"}},[a._v("#")]),a._v(" HotSpot VM 可以设置程序执行方式")]),a._v(" "),s("p",[a._v("缺省情况下HotSpot VM是采用解释器与即时编译器并存的架构，当然开发人员可以根据具体的应用场景，通过命令显式地为Java虚拟机指定在运行时到底是完全采用解释器执行，还是完全采用即时编译器执行。如下所示：")]),a._v(" "),s("ul",[s("li",[a._v("-Xint： 完全采用解释器模式执行程序；")]),a._v(" "),s("li",[a._v("-Xcomp： 完全采用即时编译器模式执行程序。如果即时编译出现问题，解释器会介入执行。")]),a._v(" "),s("li",[a._v("-Xmixed：采用解释器+即时编译器的混合模式共同执行程序。")])]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"image-20210306164548789",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/47b4d319f3cf462e849d8852605ece38.png"}},[s("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-06/47b4d319f3cf462e849d8852605ece38.png",alt:"image-20210306164548789"}})])]),a._v(" "),s("p",[s("strong",[a._v("测试解释器模式和JIT编译模式")])]),a._v(" "),s("p",[a._v("测试表明：")]),a._v(" "),s("ul",[s("li",[a._v("纯解释器模式速度最慢（JVM1.0版本用的就是纯解释器执行）")]),a._v(" "),s("li",[a._v("混合模式速度更快")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 测试解释器模式和JIT编译模式\n *  -Xint  : 6520ms\n *  -Xcomp : 950ms\n *  -Xmixed : 936ms\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IntCompTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" start "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentTimeMillis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("testPrimeNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" end "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentTimeMillis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"花费的时间为："')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("end "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("testPrimeNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//计算100以内的质数")]),a._v("\n            label"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("k "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sqrt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("k"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("continue")]),a._v(" label"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//System.out.println(j);")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),s("h4",{attrs:{id:"hotspot-vm-中的jit分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hotspot-vm-中的jit分类"}},[a._v("#")]),a._v(" HotSpot VM 中的JIT分类")]),a._v(" "),s("p",[a._v("在HotSpot VM中内嵌有两个JIT编译器，分别为Client Compiler和Server Compiler，但大多数情况下我们简称为C1编译器和C2编译器。开发人员可以通过如下命.令显式指定Java虚拟机在运行时到底使用哪一种即时编译器，如下所示：")]),a._v(" "),s("ul",[s("li",[a._v("-client： 指定Java虚拟机运行在Client模式下，并使用C1编译器；\n"),s("ul",[s("li",[a._v("C1编译器会对字节码进行==简单和可靠的优化，耗时短==。以达到更快的编译速度。")])])]),a._v(" "),s("li",[a._v("-server： 指定Java虚拟机运行在Server模式下，并使用C2编译器。\n"),s("ul",[s("li",[a._v("C2进行==耗时较长的优化，以及激进优化==。但优化的代码执行效率更高。")])])])]),a._v(" "),s("p",[s("strong",[a._v("C1和C2编译器不同的优化策略")])]),a._v(" "),s("ul",[s("li",[a._v("在不同的编译器上有不同的优化策略，C1编译器上主要有方法内联，去虚拟化、冗余消除。\n"),s("ul",[s("li",[a._v("方法内联：将引用的函数代码编译到引用点处，这样可以减少栈帧的生成，减少参数传递以及跳转过程")]),a._v(" "),s("li",[a._v("去虚拟化：对唯一的实现类进行内联")]),a._v(" "),s("li",[a._v("冗余消除：在运行期间把一些不会执行的代码折叠掉")])])]),a._v(" "),s("li",[a._v("C2的优化主要是在全局层面，逃逸分析是优化的基础。基于逃逸分析在C2上有如下几种优化：（server模式下才会有这些优化，64位系统默认就是server模式）\n"),s("ul",[s("li",[a._v("标量替换：用标量值代替聚合对象的属性值")]),a._v(" "),s("li",[a._v("栈上分配：对于未逃逸的对象分配对象在栈而不是堆")]),a._v(" "),s("li",[a._v("同步消除：清除同步操作，通常指synchronized")])])])]),a._v(" "),s("p",[a._v('分层编译（Tiered Compilation）策略：程序解释执行（不开启性能监控）可以触发C1编译，将字节码编译成机器码，可以进行简单优化，也可以加上性能监控，C2编译会根据性能监控信息进行激进优化。 不过在Java7版本之后，一旦开发人员在程序中显式指定命令“一server"时，默认将会开启分层编译策略，由C1编译器和C2编译器相互协作共同来执行编译任务。')]),a._v(" "),s("p",[s("strong",[a._v("总结")])]),a._v(" "),s("ul",[s("li",[a._v("一般来讲，JIT编译出来的机器码性能比解释器高。")]),a._v(" "),s("li",[a._v("C2编译器启动时长比C1编译器慢，系统稳定执行以后，C2编译器执行速度远远快于C1编译器。")])]),a._v(" "),s("h2",{attrs:{id:"六、graal编译器与aot编译器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、graal编译器与aot编译器"}},[a._v("#")]),a._v(" 六、Graal编译器与AOT编译器")]),a._v(" "),s("h3",{attrs:{id:"_6-1-graal编译器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-graal编译器"}},[a._v("#")]),a._v(" 6.1 Graal编译器")]),a._v(" "),s("ul",[s("li",[a._v("自JDK10起，HotSpot又加入一个全新的即时编译器： Graal编译器")]),a._v(" "),s("li",[a._v("编译效果短短几年时间就追评了C2编译器。未来可期。")]),a._v(" "),s("li",[a._v('目前，带着“实验状态"标签，需要使用开关参数 ==-XX：+UnlockExperimentalVMOptions== ，==XX： +UseJVMCICompiler==去激活，才可以使用。')])]),a._v(" "),s("h3",{attrs:{id:"_6-2-aot编译器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-aot编译器"}},[a._v("#")]),a._v(" 6.2 AOT编译器")]),a._v(" "),s("ul",[s("li",[a._v("jdk9引入了AOT编译器（静态提前编译器，Ahead Of Time Compiler）")]),a._v(" "),s("li",[a._v("Java 9引入了实验性AOT编译工具jaotc。它借助了Graal 编译器，将所输入的Java 类文件转换为机器码，并存放至生成的动态共享库之中。")]),a._v(" "),s("li",[a._v("所谓AOT编译，是与即时编译相对立的一个概念。我们知道，即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而AOT编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。")]),a._v(" "),s("li",[a._v("最大好处： Java虚拟机加载已经预编译成二进制库，可以直接执行。不必等待即时编译器的预热，减少Java应用给人带来“第一次运行慢”的不良体验。")]),a._v(" "),s("li",[a._v("缺点：\n"),s("ul",[s("li",[a._v('破坏了java"一次编译，到处运行”，必须为每个不同硬件、oS编译对应的发行包。')]),a._v(" "),s("li",[a._v("降低了Java链接过程的动态性，加载的代码在编译期就必须全部已知。")]),a._v(" "),s("li",[a._v("还需要继续优化中，最初只支持Linux x64 java base")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);