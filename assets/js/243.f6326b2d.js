(window.webpackJsonp=window.webpackJsonp||[]).push([[243],{463:function(_,v,t){"use strict";t.r(v);var a=t(42),l=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"_2-分布式事务基础理论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-分布式事务基础理论"}},[_._v("#")]),_._v(" 2. 分布式事务基础理论")]),_._v(" "),t("blockquote",[t("p",[_._v("通过前面的学习，我们了解到了分布式事务的基础概念。与本地事务不同的是，分布式系统之所以叫分布式，是因 为提供服务的各个节点分布在不同机器上，相互之间通过网络交互。不能因为有一点网络问题就导致整个系统无法 提供服务，网络因素成为了分布式事务的考量标准之一。因此，分布式事务需要更进一步的理论支持，接下来，我 们先来学习一下分布式事务的CAP理论。")]),_._v(" "),t("p",[_._v("在讲解分布式事务控制解决方案之前需要先学习一些基础理论，通过理论知识指导我们确定分布式事务控制的目 标，从而帮助我们理解每个解决方案。")])]),_._v(" "),t("h2",{attrs:{id:"_2-1-cap理论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-cap理论"}},[_._v("#")]),_._v(" 2.1 CAP理论")]),_._v(" "),t("h3",{attrs:{id:"_2-1-1理解cap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1理解cap"}},[_._v("#")]),_._v(" 2.1.1理解CAP")]),_._v(" "),t("blockquote",[t("p",[_._v("CAP是 Consistency、Availability、Partition tolerance三个词语的缩写，分别表示一致性、可用性、分区容忍性。")]),_._v(" "),t("p",[_._v("下边我们分别来解释：")]),_._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image5",href:"https://blog-1301073803.cos.ap-chengdu.myqcloud.com/typora/2020-04-04/16-48-11-aa7d8143.png"}},[t("img",{attrs:{src:"https://blog-1301073803.cos.ap-chengdu.myqcloud.com/typora/2020-04-04/16-48-11-aa7d8143.png",alt:"image5"}})])]),_._v(" "),t("p",[_._v("为了方便对CAP理论的理解，我们结合电商系统中的一些业务场景来理解CAP。 如下图，是商品信息管理的执行流程：")]),_._v(" "),t("p",[_._v("整体执行流程如下：")]),_._v(" "),t("ol",[t("li",[_._v("商品服务请求主数据库写入商品信息（添加商品、修改商品、删除商品）")]),_._v(" "),t("li",[_._v("数据库向商品服务响应写入成功。")]),_._v(" "),t("li",[_._v("商品服务请求从数据库读取商品信息。")])])]),_._v(" "),t("ol",[t("li",[_._v("Consistency：")])]),_._v(" "),t("blockquote",[t("p",[_._v("一致性是指写操作后的读操作可以读取到最新的数据状态，当数据分布在多个节点上，从任意结点读取到的数据都 是最新的状态。")]),_._v(" "),t("p",[_._v("上图中，商品信息的读写要满足一致性就是要实现如下目标：")]),_._v(" "),t("ol",[t("li",[_._v("商品服务写入主数据库成功，则向从数据库查询新数据也成功。")]),_._v(" "),t("li",[_._v("商品服务写入主数据库失败，则向从数据库查询新数据也失败。如何实现一致性？\n"),t("ol",[t("li",[_._v("写入主数据库后要将数据同步到从数据库。")]),_._v(" "),t("li",[_._v("写入主数据库后，在向从数据库同步期间要将从数据库锁定，待同步完成后再释放锁，以免在新数据写入成功 后，向从数据库查询到旧的数据。")])])])]),_._v(" "),t("p",[_._v("分布式系统一致性的特点：")]),_._v(" "),t("ol",[t("li",[_._v("由于存在数据同步的过程，写操作的响应会有一定的延迟。")]),_._v(" "),t("li",[_._v("为了保证数据一致性会对资源暂时锁定，待数据同步完成释放锁定资源。")]),_._v(" "),t("li",[_._v("如果请求数据同步失败的结点则会返回错误信息，一定不会返回旧数据。")])])]),_._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[_._v("Availability ：")])]),_._v(" "),t("blockquote",[t("p",[_._v("可用性是指任何事务操作都可以得到响应结果，且不会出现响应超时或响应错误。 上图中，商品信息读取满足可用性就是要实现如下目标：")]),_._v(" "),t("ol",[t("li",[_._v("从数据库接收到数据查询的请求则立即能够响应数据查询结果。")]),_._v(" "),t("li",[_._v("从数据库不允许出现响应超时或响应错误。如何实现可用性？")]),_._v(" "),t("li",[_._v("写入主数据库后要将数据同步到从数据库。")]),_._v(" "),t("li",[_._v("由于要保证从数据库的可用性，不可将从数据库中的资源进行锁定。")]),_._v(" "),t("li",[_._v("即时数据还没有同步过来，从数据库也要返回要查询的数据，哪怕是旧数据，如果连旧数据也没有则可以按照 约定返回一个默认信息，但不能返回错误或响应超时。")])]),_._v(" "),t("p",[_._v("分布式系统可用性的特点： 所有请求都有响应，且不会出现响应超时或响应错误。")])]),_._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[_._v("Partition tolerance ：")])]),_._v(" "),t("blockquote",[t("p",[_._v("通常分布式系统的各各结点部署在不同的子网，这就是网络分区，不可避免的会出现由于网络问题而导致结点之间 通信失败，此时仍可对外提供服务，这叫分区容忍性。")]),_._v(" "),t("p",[_._v("上图中，商品信息读写满足分区容忍性就是要实现如下目标：")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("主数据库向从数据库同步数据失败不影响读写操作。")])]),_._v(" "),t("li",[t("p",[_._v("其一个结点挂掉不影响另一个结点对外提供服务。如何实现分区容忍性？")])]),_._v(" "),t("li",[t("p",[_._v("尽量使用异步取代同步操作，例如使用异步方式将数据从主数据库同步到从数据，这样结点之间能有效的实现 松耦合。")])]),_._v(" "),t("li",[t("p",[_._v("添加从数据库结点，其中一个从结点挂掉其它从结点提供服务。分布式分区容忍性的特点：")])])]),_._v(" "),t("p",[_._v("分区容忍性分是布式系统具备的基本能力。")])]),_._v(" "),t("h3",{attrs:{id:"_2-1-2-cap组合方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-cap组合方式"}},[_._v("#")]),_._v(" 2.1.2 CAP组合方式")]),_._v(" "),t("blockquote",[t("p",[_._v("1、上边商品管理的例子是否同时具备 CAP呢？")]),_._v(" "),t("p",[_._v("在所有分布式事务场景中不会同时具备CAP三个特性，因为在具备了P的前提下C和A是不能共存的。比如：")]),_._v(" "),t("p",[_._v("下图满足了P即表示实现分区容忍：")]),_._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image5",href:"https://blog-1301073803.cos.ap-chengdu.myqcloud.com/typora/2020-04-04/16-47-57-e567329e.png"}},[t("img",{attrs:{src:"https://blog-1301073803.cos.ap-chengdu.myqcloud.com/typora/2020-04-04/16-47-57-e567329e.png",alt:"image5"}})])]),_._v(" "),t("p",[_._v("本图分区容忍的含义是：")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("主数据库通过网络向从数据同步数据，可以认为主从数据库部署在不同的分区，通过网络进行交互。")])]),_._v(" "),t("li",[t("p",[_._v("当主数据库和从数据库之间的网络出现问题不影响主数据库和从数据库对外提供服务。")])]),_._v(" "),t("li",[t("p",[_._v("其一个结点挂掉不影响另一个结点对外提供服务。")])])]),_._v(" "),t("p",[_._v("如果要实现C则必须保证数据一致性，在数据同步的时候为防止向从数据库查询不一致的数据则需要将从数据库数 据锁定，待同步完成后解锁，如果同步失败从数据库要返回错误信息或超时信息。")]),_._v(" "),t("p",[_._v("如果要实现A则必须保证数据可用性，不管任何时候都可以向从数据查询数据，则不会响应超时或返回错误信息。 通过分析发现在满足P的前提下C和A存在矛盾性。")])]),_._v(" "),t("hr"),_._v(" "),t("blockquote",[t("p",[_._v("2、CAP有哪些组合方式呢？")]),_._v(" "),t("p",[_._v("所以在生产中对分布式事务处理时要根据需求来确定满足CAP的哪两个方面。")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("AP：")]),_._v(" "),t("p",[_._v("放弃一致性，追求分区容忍性和可用性。这是很多分布式系统设计时的选择。例如：")]),_._v(" "),t("p",[_._v("上边的商品管理，完全可以实现AP，前提是只要用户可以接受所查询的到数据在一定时间内不是最新的即可。")]),_._v(" "),t("p",[_._v("通常实现AP都会保证最终一致性，后面讲的BASE理论就是根据AP来扩展的，一些业务场景 比如：订单退款，今日退款成功，明日账户到账，只要用户可以接受在一定时间内到账即可。")])]),_._v(" "),t("li",[t("p",[_._v("CP：")]),_._v(" "),t("p",[_._v("放弃可用性，追求一致性和分区容错性，我们的zookeeper其实就是追求的强一致，又比如跨行转账，一次转账请 求要等待双方银行系统都完成整个事务才算完成。")])]),_._v(" "),t("li",[t("p",[_._v("CA：")]),_._v(" "),t("p",[_._v("放弃分区容忍性，即不进行分区，不考虑由于网络不通或结点挂掉的问题，则可以实现一致性和可用性。那么系统 将不是一个标准的分布式系统，我们最常用的关系型数据就满足了CA。")]),_._v(" "),t("p",[_._v("上边的商品管理，如果要实现CA则架构如下：")]),_._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image6",href:"https://blog-1301073803.cos.ap-chengdu.myqcloud.com/typora/2020-04-04/16-48-07-341e081f.png"}},[t("img",{attrs:{src:"https://blog-1301073803.cos.ap-chengdu.myqcloud.com/typora/2020-04-04/16-48-07-341e081f.png",alt:"image6"}})])]),_._v(" "),t("p",[_._v("主数据库和从数据库中间不再进行数据同步，数据库可以响应每次的查询请求，通过事务隔离级别实现每个查询请 求都可以返回最新的数据。")])])])]),_._v(" "),t("h3",{attrs:{id:"_2-1-3-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-总结"}},[_._v("#")]),_._v(" 2.1.3 总结")]),_._v(" "),t("blockquote",[t("p",[_._v("通过上面我们已经学习了CAP理论的相关知识，CAP是一个已经被证实的理论：一个分布式系统最多只能同时满足 一致性（Consistency）、可用性（Availability）和分区容忍性（Partition tolerance）这三项中的两项。它可以作为我们进行架构设计、技术选型的考量标准。对于多数大型互联网应用的场景，结点众多、部署分散，而且现在的 集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到N个9（99.99..%），并要达到良 好的响应性能来提高用户体验，因此一般都会做出如下选择：保证P和A，舍弃C强一致，保证最终一致性。")])]),_._v(" "),t("h2",{attrs:{id:"_2-2-base理论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-base理论"}},[_._v("#")]),_._v(" 2.2 BASE理论")]),_._v(" "),t("blockquote",[t("p",[_._v("1、理解强一致性和最终一致性")]),_._v(" "),t("p",[_._v("CAP理论告诉我们一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容忍性（Partition tolerance）这三项中的两项，其中AP在实际应用中较多，AP即舍弃一致性，保证可用性和分区容忍性，但是在实际生产中很多场景都要实现一致性，比如前边我们举的例子主数据库向从数据库同步数据，即使不要 一致性，但是最终也要将数据同步成功来保证数据一致，这种一致性和CAP中的一致性不同，CAP中的一致性要求 在任何时间查询每个结点数据都必须一致，它强调的是强一致性，但是最终一致性是允许可以在一段时间内每个结 点的数据不一致，但是经过一段时间每个结点的数据必须一致，它强调的是最终数据的一致性。")]),_._v(" "),t("p",[_._v("2、Base理论介绍")]),_._v(" "),t("p",[_._v('BASE 是 Basically Available(基本可用)、Soft state(软状态)和 Eventually consistent (最终一致性)三个短语的缩 写。BASE理论是对CAP中AP的一个扩展，通过牺牲强一致性来获得可用性，当出现故障允许部分不可用但要保证 核心功能可用，允许数据在一段时间内是不一致的，但最终达到一致状态。满足BASE理论的事务，我们称之为"'),t("strong",[_._v("柔性事务")]),_._v('"。')]),_._v(" "),t("p",[_._v("基本可用:分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。如，电商网站交易付款出 现问题了，商品依然可以正常浏览。")]),_._v(" "),t("p",[_._v("软状态:由于不要求强一致性，所以BASE允许系统中存在中间状态（也叫"),t("strong",[_._v("软状态")]),_._v('），这个状态不影响系统可用 性，如订单的"支付中"、"数据同步中"等状态，待数据最终一致后状态改为"成功"状态。')]),_._v(" "),t("p",[_._v('最终一致:最终一致是指经过一段时间后，所有节点数据都将会达到一致。如订单的"支付中"状态，最终会变 为"支付成功"或者"支付失败"，使订单状态与实际交易结果达成一致，但需要一定时间的延迟、等待。')])])])}),[],!1,null,null,null);v.default=l.exports}}]);