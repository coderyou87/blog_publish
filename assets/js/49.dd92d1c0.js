(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{394:function(a,s,t){"use strict";t.r(s);var e=t(42),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"类的加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的加载器"}},[a._v("#")]),a._v(" 类的加载器")]),a._v(" "),t("h2",{attrs:{id:"一、概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、概述"}},[a._v("#")]),a._v(" 一、概述")]),a._v(" "),t("h3",{attrs:{id:"_1-1-面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-面试题"}},[a._v("#")]),a._v(" 1.1 面试题")]),a._v(" "),t("ol",[t("li",[a._v("深入分析"),t("code",[a._v("ClassLoader")]),a._v("、双亲委派机制")]),a._v(" "),t("li",[a._v("类加载器的双亲委派模型是什么，优点有哪些")]),a._v(" "),t("li",[a._v("双亲委派机制及使用原因")]),a._v(" "),t("li",[a._v("都有哪些类加载器，分别加载哪些文件")]),a._v(" "),t("li",[t("code",[a._v("Class")]),a._v("的 "),t("code",[a._v('forName("java.lang.String")')]),a._v(" 和 "),t("code",[a._v("Class")]),a._v("的 "),t("code",[a._v("getClassLoader()")]),a._v(" 的 "),t("code",[a._v('loadClass("java.lang.String")')]),a._v("有什么区别？")]),a._v(" "),t("li",[a._v("双亲委派机制可以打破吗？为什么？")])]),a._v(" "),t("h3",{attrs:{id:"_1-2-类加载的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-类加载的分类"}},[a._v("#")]),a._v(" 1.2 类加载的分类")]),a._v(" "),t("p",[a._v("类的加载分类："),t("strong",[a._v("显式加载")]),a._v(" vs "),t("strong",[a._v("隐式加载")])]),a._v(" "),t("p",[t("code",[a._v("Class")]),a._v(" 文件的显式加载与隐式加载的方式是指 "),t("code",[a._v("JVM")]),a._v(" 加载 "),t("code",[a._v("Class")]),a._v(" 文件到内存的方式")]),a._v(" "),t("ul",[t("li",[a._v("显式加载指的是在代码中通过调用 "),t("code",[a._v("ClassLoader")]),a._v(" 加载 "),t("code",[a._v("Class")]),a._v(" 对象，如直接使用 "),t("code",[a._v("Class.forName(name)")]),a._v(" 或 "),t("code",[a._v("this.getClass().getClassLoader().loadClass()")]),a._v(" 加载 "),t("code",[a._v("Class")]),a._v("对象")]),a._v(" "),t("li",[a._v("隐式加载则是不直接在代码中调用 "),t("code",[a._v("ClassLoader")]),a._v(" 的方法加载 "),t("code",[a._v("Class")]),a._v(" 对象，而是通过虚拟机自动加载到内存中，如在加载某个类的 "),t("code",[a._v("Class")]),a._v(" 文件时，该类的 "),t("code",[a._v("Class")]),a._v(" 文件中引用了另外一个类的对象，此时额外引用的类将通过 "),t("code",[a._v("JVM")]),a._v(" 自动加载到内存中")])]),a._v(" "),t("p",[a._v("在日常开发中以上两种方式一般会混合使用")]),a._v(" "),t("h3",{attrs:{id:"_1-3-类加载器的必要性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-类加载器的必要性"}},[a._v("#")]),a._v(" 1.3 类加载器的必要性")]),a._v(" "),t("p",[a._v("一般情况下，"),t("code",[a._v("Java")]),a._v(" 开发人员并不需要在程序中显式地使用类加载器，但是了解类加载器的加载机制却显得至关重要。从以下几个方面说：")]),a._v(" "),t("ul",[t("li",[a._v("避免在开发中遇到 "),t("code",[a._v("java.lang.ClassNotFoundException")]),a._v(" 异常或 "),t("code",[a._v("java.lang.NoClassDeFoundError")]),a._v(" 异常时手足无措。只有了解类加载器的加载机制才能够在出现异常的时候快速地根据错误异常日志定位问题和解决问题")]),a._v(" "),t("li",[a._v("需要支持类的动态加载或需要对编译后的字节码文件进行加解密操作时，就需要与类加载器打交道了")]),a._v(" "),t("li",[a._v("开发人员可以在程序中编写自定义类加载器来重新定义类的加载规则，以便实现一些自定义的处理逻辑")])]),a._v(" "),t("h3",{attrs:{id:"_1-4-命名空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-命名空间"}},[a._v("#")]),a._v(" 1.4 命名空间")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("何为类的唯一性？\n对于任意一个类，都需要由"),t("strong",[a._v("加载它的类加载器和这个类本身")]),a._v("一同确认其在 "),t("code",[a._v("Java")]),a._v("虚拟机中的唯一性。每一个类加载器，都拥有一个独立的类名称空间："),t("strong",[a._v("比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提下才有意义")]),a._v("。否则，即使这两个类源自同一个 "),t("code",[a._v("Class")]),a._v("文件，被同一个虚拟机加载，只要加载他们的类加载器不同，那这两个类就必定不相等")])]),a._v(" "),t("li",[t("p",[a._v("命名空间")]),a._v(" "),t("ul",[t("li",[a._v("每个类加载器都有自己的命名空间，命名空间由该加载器以及所有的父加载器所加载的类组成")]),a._v(" "),t("li",[a._v("在同一命名空间中，不会出现类的完整名字(包括类的包名)相同的两个类")]),a._v(" "),t("li",[a._v("在不同的命名空间中，有可能会出现类的完整名字(包括类的包名)相同的两个类")])])])]),a._v(" "),t("p",[a._v("在大型应用中，我们往往借助这一特性，来运行同一个类的不同版本")]),a._v(" "),t("h3",{attrs:{id:"_1-5-类加载机制的基本特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-类加载机制的基本特征"}},[a._v("#")]),a._v(" 1.5 类加载机制的基本特征")]),a._v(" "),t("p",[a._v("通常类加载机制有三个基本特征：")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("双亲委派模型")]),a._v("。但不是所有类加载都遵守这个模型，有的时候，启动类加载器所加载的类型，是可能要加载用户代码的，比如 "),t("code",[a._v("JDK")]),a._v("内部的 "),t("code",[a._v("ServiceProvider/ServiceLoader")]),a._v("机制，用户可以在标准 "),t("code",[a._v("API")]),a._v(" 框架上，提供自己的实现，"),t("code",[a._v("JDK")]),a._v(" 也需要提供些默认的参考实现。例如，"),t("code",[a._v("Java")]),a._v(" 中 "),t("code",[a._v("JNDI")]),a._v("、"),t("code",[a._v("JDBC")]),a._v("、文件系统、"),t("code",[a._v("Cipher")]),a._v(" 等很多方面，都是利用的这种机制，这种情况就不会用双亲委派模型去加载，而是利用所谓的上下文加载器")]),a._v(" "),t("li",[t("strong",[a._v("可见性")]),a._v("，子类加载器可以访问父加载器加载的类型，但是反过来是不允许的。不然，因为缺少必要的隔离，我们就没有办法利用类加载器去实现容器的逻辑")]),a._v(" "),t("li",[t("strong",[a._v("单一性")]),a._v('，由于父加载器的类型对于子加载器是可见的，所以父加载器中加载过的类型，就不会在子加载器中重复加载。但是注意，类加载器"邻居"间，同一类型仍然可以被加载多次，因为相互并不可见')])]),a._v(" "),t("h2",{attrs:{id:"二、类加载器分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、类加载器分类"}},[a._v("#")]),a._v(" 二、类加载器分类")]),a._v(" "),t("p",[a._v("JVM 支持两种类型的类加载器，分别为"),t("strong",[a._v("引导类加载器(Bootstrap ClassLoader)"),t("strong",[a._v("和")]),a._v("自定义类加载器(User-Defined ClassLoader)")])]),a._v(" "),t("p",[a._v("从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是 Java 虚拟机规范却没有这么定义，而是将所有派生于抽象类 ClassLoader 的类加载器都划分为自定义类加载器。无论类加载器的类型如何划分，在程序中我们最常见的类加载器结构主要是如下情况：")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210330235747266",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-30/893dbf79504646cb8c4d6a0bab50e8b7.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-30/893dbf79504646cb8c4d6a0bab50e8b7.png",alt:"image-20210330235747266"}})])]),a._v(" "),t("ul",[t("li",[a._v('除了顶层的启动类加载器外，其余的类加载器都应当有自己的"父类"加载器')]),a._v(" "),t("li",[a._v("不同类加载器看似是继承(Inheritance)关系，实际上是包含关系。在下层加载器中，包含着上层加载器的引用")])]),a._v(" "),t("p",[a._v("“父类加载器”并非下层加载器extends上层加载器，而是包含了上层加载器的引用")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//父类加载器")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("parent "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ParentClassLoader")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ParentClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ChildClassLoader")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ChildClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//parent = new ParentClassLoader();")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h3",{attrs:{id:"_2-1-引导类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-引导类加载器"}},[a._v("#")]),a._v(" 2.1 引导类加载器")]),a._v(" "),t("p",[a._v("启动类加载器(引导类加载器，"),t("code",[a._v("Bootstrap ClassLoader")]),a._v(")")]),a._v(" "),t("ul",[t("li",[a._v("这个类加载使用 "),t("code",[a._v("C/C++")]),a._v(" 语言实现的，嵌套在 "),t("code",[a._v("JVM")]),a._v(" 内部")]),a._v(" "),t("li",[a._v("它用来加载 "),t("code",[a._v("Java")]),a._v(" 的核心库("),t("code",[a._v("JAVA_HOME/jre/lib/rt.jar")]),a._v(" 或 "),t("code",[a._v("sun.boot.class.path")]),a._v(" 路径下的内容)。用于提供 "),t("code",[a._v("JVM")]),a._v(" 自身需要的类")]),a._v(" "),t("li",[a._v("并不继承自 "),t("code",[a._v("java.lang.ClassLoader")]),a._v("，没有父加载器")]),a._v(" "),t("li",[a._v("出于安全考虑，"),t("code",[a._v("Bootstrap")]),a._v(" 启动类加载器加载包名为 "),t("code",[a._v("java、javax、sun")]),a._v(" 等开头的类")]),a._v(" "),t("li",[a._v("加载扩展类和应用程序类加载器，并指定为他们的父类加载器")])]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210331000338383",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-31/13d2d401d564424d8f81d7fd71bfe577.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-31/13d2d401d564424d8f81d7fd71bfe577.png",alt:"image-20210331000338383"}})])]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210331000349136",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-31/c93dc27eaa7142ab8b42df95b99c5d05.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-31/c93dc27eaa7142ab8b42df95b99c5d05.png",alt:"image-20210331000349136"}})])]),a._v(" "),t("p",[a._v("使用 "),t("code",[a._v("-XX:+TraceClassLoading")]),a._v("参数")]),a._v(" "),t("p",[a._v("启动类加载器使用 "),t("code",[a._v("C++")]),a._v(" 编写的？Yes！\n"),t("code",[a._v("C/C++")]),a._v("：指针函数 & 函数指针、C++ 支持多继承、更加高效\n"),t("code",[a._v("Java")]),a._v(" ：由 C++ 演变而来，(C++)-- 版，单继承")]),a._v(" "),t("h3",{attrs:{id:"_2-2-扩展类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-扩展类加载器"}},[a._v("#")]),a._v(" 2.2 扩展类加载器")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Java 语言编写，由 sun.misc.Launcher$ExtClassLoader 实现")])]),a._v(" "),t("li",[t("p",[a._v("继承于 ClassLoader 类")])]),a._v(" "),t("li",[t("p",[a._v("父类加载器为启动类加载器")])]),a._v(" "),t("li",[t("p",[a._v("从 "),t("code",[a._v("java.ext.dirs")]),a._v(" 系统属性所指定的目录中加载类库，或从 "),t("code",[a._v("JDK")]),a._v(" 的安装目录的 "),t("code",[a._v("jre/lib/ext")]),a._v(" 子目录下加载类库。如果用户创建的 "),t("code",[a._v("JAR")]),a._v(" 放在此目录下，也会自动由扩展类加载器加载")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210331001047371",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-31/17b581f44a7c42848290537063ba80c6.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-31/17b581f44a7c42848290537063ba80c6.png",alt:"image-20210331001047371"}})])])])]),a._v(" "),t("h3",{attrs:{id:"_2-3-系统类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-系统类加载器"}},[a._v("#")]),a._v(" 2.3 系统类加载器")]),a._v(" "),t("p",[a._v("系统类加载器也称为应用程序类加载器")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Java")]),a._v(" 语言编写，由 "),t("code",[a._v("sun.misc.Launcher$AppClassLoader")]),a._v(" 实现")]),a._v(" "),t("li",[a._v("继承于 "),t("code",[a._v("ClassLoader")]),a._v(" 类")]),a._v(" "),t("li",[a._v("父类加载器为扩展类加载器")]),a._v(" "),t("li",[a._v("它负责加载环境变量 "),t("code",[a._v("classpath")]),a._v(" 或系统属性 "),t("code",[a._v("java.class.path")]),a._v(" 指定路径下的类库")]),a._v(" "),t("li",[a._v("应用程序中的类加载器默认是系统类加载器")]),a._v(" "),t("li",[a._v("它是用户自定义类加载器的默认父加载器")]),a._v(" "),t("li",[a._v("通过 "),t("code",[a._v("ClassLoader")]),a._v(" 的 "),t("code",[a._v("getSystemClassLoader()")]),a._v(" 方法可以获取到该类加载器")])]),a._v(" "),t("h3",{attrs:{id:"_2-4-用户自定义类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-用户自定义类加载器"}},[a._v("#")]),a._v(" 2.4 用户自定义类加载器")]),a._v(" "),t("ul",[t("li",[a._v("在 Java 的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的。在必要时，我们还可以自定义类加载器，来定制类的加载方式")]),a._v(" "),t("li",[a._v("体现 Java 语言强大生命力和巨大魅力的关键因素之一便是，Java 开发者可以自定义类加载器来实现类库的动态加载，加载源可以是本地的 JAR 包，也可以是网络上的远程资源")]),a._v(" "),t("li",[a._v("通过类加载器可以实现非常绝妙的插件机制，这方面的实际应用案例不胜枚举。例如，著名的 OSGI 组件框架，再如 Eclipse 的插件机制。类加载器为应用程序提供了一种动态增加新功能的机制，这种机制无需重新打包发布应用程序就能实现")]),a._v(" "),t("li",[a._v("同时，自定义加载器能够实现应用隔离，例如 Tomcat、Spring 等中间件和组件框架都在内部实现了自定义的加载器，并通过自定义加载器隔离不同的组件模块。这种机制比 C/C++ 程序要好太多，想不修改 C/C++ 程序就能为其新增功能，几乎是不可能的，仅仅一个兼容性便能阻挡所有美好的设想")]),a._v(" "),t("li",[a._v("自定义类加载器通常需要继承于 ClassLoader")])]),a._v(" "),t("h2",{attrs:{id:"三、测试不同的类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、测试不同的类加载器"}},[a._v("#")]),a._v(" 三、测试不同的类加载器")]),a._v(" "),t("p",[a._v("每个 "),t("code",[a._v("Class")]),a._v(" 对象都会包含一个定义它的 "),t("code",[a._v("ClassLoader")]),a._v(" 的一个引用")]),a._v(" "),t("p",[a._v("获取 "),t("code",[a._v("ClassLoader")]),a._v(" 的途径")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210331003000926",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-31/17bd9794c84e4685894c356f5ba64a88.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-31/17bd9794c84e4685894c356f5ba64a88.png",alt:"image-20210331003000926"}})])]),a._v(" "),t("p",[a._v("说明：\n站在程序的角度看，引导类加载器与另外两种类加载器(系统类加载器和扩展类加载器)并不是同一个层次意义上的加载器，引导类加载器是使用 C++ 语言编写而成的，而另外两种类加载器则是使用 Java 语言编写的。由于引导类加载器压根儿就不是一个 Java 类，因此在 Java 程序中只能打印出空值")]),a._v(" "),t("p",[t("strong",[a._v("数组类的 Class 对象，不是由类加载器去创建的，而是在 Java 运行期 JVM 根据需要自动创建的。")]),a._v(" 对于数组类的类加载器来说，是通过 "),t("code",[a._v("Class.geetClassLoader()")]),a._v(" 返回的，与数组当中元素类型的类加载器是一样的："),t("strong",[a._v("如果数组当中的元素类型是基本数据类型，数组类是没有类加载器的")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" strArr "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("strArr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//运行结果：null")]),a._v("\n \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoaderTest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" test "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoaderTest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("test"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//运行结果：sun.misc.Launcher$AppClassLoader@18b4aac2")]),a._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" inst "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("inst"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//运行结果：null")]),a._v("\n")])])]),t("h2",{attrs:{id:"四、classloader源码分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、classloader源码分析"}},[a._v("#")]),a._v(" 四、ClassLoader源码分析")]),a._v(" "),t("p",[t("code",[a._v("ClassLoader")]),a._v("与现有类加载的关系：")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210331145230981",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-31/eb7b950a44674f2b848405b720e11437.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-03-31/eb7b950a44674f2b848405b720e11437.png",alt:"image-20210331145230981"}})])]),a._v(" "),t("p",[a._v("除了以上虚拟机自带的加载器外，用户还可以定制自己的类加载器。"),t("code",[a._v("Java")]),a._v("提供了抽象类 "),t("code",[a._v("java.lang.ClassLoader")]),a._v("，所有用户自定义的类加载器都应该继承 "),t("code",[a._v("ClassLoader")]),a._v("类")]),a._v(" "),t("h3",{attrs:{id:"_4-1-classloader-的主要方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-classloader-的主要方法"}},[a._v("#")]),a._v(" 4.1 ClassLoader 的主要方法")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("获取该类加载器的父类加载器")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getParent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])])]),a._v(" "),t("li",[t("p",[a._v("根据名称加载类")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v("\n")])])]),t("p",[a._v("加载名称为 "),t("code",[a._v("name")]),a._v(" 的类，返回的结果为 "),t("code",[a._v("Class")]),a._v(" 类对象，如果找不到名称为 "),t("code",[a._v("name")]),a._v(" 的类，则抛出异常 "),t("code",[a._v("ClassNotFoundException")]),a._v("，该方法的具体实现，就是双亲委派模型")])]),a._v(" "),t("li",[t("p",[a._v("根据名称查找类")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("findClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v("\n")])])]),t("p",[a._v("查找名为 "),t("code",[a._v("name")]),a._v(" 的类，返回结果是 "),t("code",[a._v("Class")]),a._v(" 类对象")]),a._v(" "),t("p",[a._v("在"),t("code",[a._v("JDK1.2")]),a._v("之前，在自定义类加载时，总会去继承"),t("code",[a._v("ClassLoader")]),a._v("类并重写"),t("code",[a._v("loadClass")]),a._v("方法，从而实现自定义的类加载类。但是在"),t("code",[a._v("JDK1.2")]),a._v("之后已不再建议用户去覆盖"),t("code",[a._v("loadClass()")]),a._v("方法，而是建议把自定义的类加载逻辑写在"),t("code",[a._v("findClass()")]),a._v("方法中，从前面的分析可知， "),t("code",[a._v("findClass()")]),a._v("方法是在"),t("code",[a._v("loadClass()")]),a._v("方法中被调用的，当"),t("code",[a._v("loadClass()")]),a._v("方法中父加载器加载失败后，则会调用自己的"),t("code",[a._v("findClass()")]),a._v("方法来完成类加载，这样就可以保证自定义的类加载器也符合双亲委托模式。需要注意的是"),t("code",[a._v("ClassLoader")]),a._v("类中并没有实现"),t("code",[a._v("findClass()")]),a._v("方法的具体代码逻辑，取而代之的是抛出"),t("code",[a._v("ClassNotFoundException")]),a._v("异常，同时应该知道的是"),t("code",[a._v("findClass")]),a._v("方法通常是和"),t("code",[a._v("defineClass")]),a._v("方法一起使用的。一般情况下，在自定义类加载器时，会直接覆盖"),t("code",[a._v("ClassLoader")]),a._v("的"),t("code",[a._v("findClass()")]),a._v("方法并编写加载规则，取得要加载类的字节码后转换成流，然后调用"),t("code",[a._v("defineClass()")]),a._v("方法生成类的"),t("code",[a._v("Class")]),a._v("对象。")])]),a._v(" "),t("li",[t("p",[a._v("将字节数组转换为"),t("code",[a._v("Class")]),a._v("对象")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("defineClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" off"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("根据给定的字节数组b转换为"),t("code",[a._v("Class")]),a._v("的实例，"),t("code",[a._v("off")]),a._v("和"),t("code",[a._v("len")]),a._v("参数表示实际"),t("code",[a._v("Class")]),a._v("信息在"),t("code",[a._v("byte")]),a._v("数组中的位置和长度，其中"),t("code",[a._v("byte")]),a._v("数组b是"),t("code",[a._v("ClassLoader")]),a._v("从外部获取的。这是受保护的方法，只有在自定义"),t("code",[a._v("ClassLoader")]),a._v("子类中可以使用。")]),a._v(" "),t("p",[t("code",[a._v("defineClass()")]),a._v("方法是用来将"),t("code",[a._v("byte")]),a._v("字节流解析成"),t("code",[a._v("JVM")]),a._v("能够识别的"),t("code",[a._v("Class")]),a._v("对象("),t("code",[a._v("ClassLoader")]),a._v("中已实现该方法逻辑)，通过这个方法不仅能够通过"),t("code",[a._v("class")]),a._v("文件实例化"),t("code",[a._v("class")]),a._v("对象，也可以通过其他方式实例化"),t("code",[a._v("class")]),a._v("对象，如通过网络接收一个类的字节码，然后转换为"),t("code",[a._v("byte")]),a._v("字节流创建对应的"),t("code",[a._v("Class")]),a._v("对象。\n"),t("code",[a._v("defineClass()")]),a._v("方法通常与"),t("code",[a._v("findClass()")]),a._v("方法一起使用，一般情况下，在自定义类加载器时，会直接覆盖"),t("code",[a._v("ClassLoader")]),a._v("的"),t("code",[a._v("findClass()")]),a._v("方法并编写加载规则，取得要加载类的字节码后转换成流，然后调用"),t("code",[a._v("defineClass()")]),a._v("方法生成类的"),t("code",[a._v("Class")]),a._v("对象")])]),a._v(" "),t("li",[t("p",[a._v("链接指定的一个"),t("code",[a._v("Java")]),a._v("类")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("resolveClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("链接指定的一个"),t("code",[a._v("Java")]),a._v("类。使用该方法可以使用类的"),t("code",[a._v("Class")]),a._v("对象创建完成的同时也被解析(即加载的同时也进行解析)。前面我们说链接阶段主要是对字节码进行验证，为类变量分配内存并设置初始值同时将字节码文件中的符号引用转换为直接引用。")])]),a._v(" "),t("li",[t("p",[a._v("根据名称查找已经被加载的类")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("findLoadedClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("查找名称为"),t("code",[a._v("name")]),a._v("的已经被加载过的类，返回结果为"),t("code",[a._v("java.lang.Class")]),a._v("类的实例。这个方法是"),t("code",[a._v("final")]),a._v("方法，无法被修改")])]),a._v(" "),t("li",[t("p",[a._v("ClassLoader的双亲")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" parent\n")])])]),t("p",[a._v("它也是一个"),t("code",[a._v("ClassLoader")]),a._v("的实例，这个字段所表示的"),t("code",[a._v("ClassLoader")]),a._v("也称为这个"),t("code",[a._v("ClassLoader")]),a._v("的双亲。在类加载的过程中,"),t("code",[a._v("ClassLoader")]),a._v("可能会将某些请求交予自己的双亲处理。")])]),a._v(" "),t("li",[t("p",[a._v("剖析loadClass方法")]),a._v(" "),t("p",[a._v("测试代码：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getSystemClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"com.it.User"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("涉及到对如下方法的调用：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//resolve:true-加载class的同时进行解析操作。")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//同步操作，保证只能加载一次。")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClassLoadingLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// First, check if the class has already been loaded")]),a._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//首先，在缓存中判断是否已经加载同名的类")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("findLoadedClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" t0 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nanoTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//获取当前类加载器的父类加载器。")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("parent "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//如果存在父类加载器，则调用父类加载器进行类的加载（递归）")]),a._v("\n                    c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//parent为null:父类加载器是引导类加教器")]),a._v("\n                    c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("findBootstrapClassOrNull")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ClassNotFoundException thrown if class not found")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// from the non-null parent class loader")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//当前类的加载器的父类加载器未加载此类or此类的加载器未加载此类")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// If still not found, then invoke findClass in order")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// to find the class.")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" t1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nanoTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//调用当前ClassLoader的findClass()")]),a._v("\n                c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("findClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// this is the defining class loader; record the stats")]),a._v("\n                sun"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("misc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PerfCounter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getParentDelegationTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("t1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" t0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                sun"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("misc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PerfCounter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFindClassTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addElapsedTimeFrom")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                sun"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("misc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PerfCounter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFindClasses")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("increment")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//是否进行解析操作")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("resolveClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" \n\n")])])])])]),a._v(" "),t("h3",{attrs:{id:"_4-2-secureclassloader与urlclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-secureclassloader与urlclassloader"}},[a._v("#")]),a._v(" 4.2 SecureClassLoader与URLClassLoader")]),a._v(" "),t("p",[t("code",[a._v("SecureClassLoader")]),a._v("扩展了"),t("code",[a._v("ClassLoader")]),a._v("，新增了几个与使用相关的代码源(对代码源的位置及其证书的验证)和权限定义类验证(主要指对"),t("code",[a._v("class")]),a._v("源码的访问权限)的方法，一般我们不会直接跟这个类打交道，更多是与它的子类"),t("code",[a._v("URLClassLoader")]),a._v("有所关联。")]),a._v(" "),t("p",[a._v("前面说过，"),t("code",[a._v("ClassLoader")]),a._v("是一个抽象类，很多方法是空的没有实现，比如 "),t("code",[a._v("findClass")]),a._v("()、"),t("code",[a._v("findResource()")]),a._v("等。而"),t("code",[a._v("URLClassLoader")]),a._v("这个实现类为这些方法提供了具体的实现。并新增了"),t("code",[a._v("URLClassPath")]),a._v("类协助取得"),t("code",[a._v("Class")]),a._v("字节码流等功能。在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承"),t("code",[a._v("URLClassLoader")]),a._v("类，这样就可以避免自己去编写"),t("code",[a._v("findClass()")]),a._v("方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210401092059190",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/7e904d3e5e05444e87bf01002d15cbfe.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/7e904d3e5e05444e87bf01002d15cbfe.png",alt:"image-20210401092059190"}})])]),a._v(" "),t("h3",{attrs:{id:"_4-3-extclassloader与appclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-extclassloader与appclassloader"}},[a._v("#")]),a._v(" 4.3 ExtClassLoader与AppClassLoader")]),a._v(" "),t("p",[a._v("拓展类加载器ExtClassLoader和系统类加载AppClassLoader，这两个类都继承自URLClassLoader，是sun.misc.Launcher的静态内部类。\nsun.misc.Launcher主要被系统用于启动主应用程序，ExtClassLoader和AppClassLoader都是由sun.misc.Launcher创建的，其类主要类结构如下:")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210401092446708",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/1af6cc3a8e2f4ae48f1e44ecaa004a74.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/1af6cc3a8e2f4ae48f1e44ecaa004a74.png",alt:"image-20210401092446708"}})])]),a._v(" "),t("h3",{attrs:{id:"_4-4-class-forname与classloader-loadclass"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-class-forname与classloader-loadclass"}},[a._v("#")]),a._v(" 4.4 Class.forName与ClassLoader.loadClass()")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("Class.forName()")]),a._v(": 是一个静态方法,最常用的是"),t("code",[a._v("Class.forName(String className)")]),a._v(";根据传入的类的全限定名返回一个Class对象。"),t("strong",[a._v("该方法在将Class文件加载到内存的同时,会执行类的初始化。")])]),a._v(" "),t("p",[a._v("如:"),t("code",[a._v('Class.forName( "com.it.Helloworld")')]),a._v(" ;")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("ClassLoader.loadClass()")]),a._v(": 这是一个实例方法,需要一个"),t("code",[a._v("ClassLoader")]),a._v("对象来调用该方法。**该方法将"),t("code",[a._v("class")]),a._v("文件加载到内存时,并不会执行类的初始化,直到这个类第一次使用时才进行初始化。**该方法因为需要得到个"),t("code",[a._v("ClassLoader")]),a._v("对象,所以可以根据需要指定使用哪个类加载器.如: "),t("code",[a._v("ClassLoader cl=......;")])]),a._v(" "),t("p",[t("code",[a._v('cl.loadClass ("com.atguigu.java.Helloworld" );')])])])]),a._v(" "),t("h2",{attrs:{id:"五、双亲委派模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、双亲委派模型"}},[a._v("#")]),a._v(" 五、双亲委派模型")]),a._v(" "),t("h3",{attrs:{id:"_5-1-定义与本质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-定义与本质"}},[a._v("#")]),a._v(" 5.1 定义与本质")]),a._v(" "),t("p",[a._v("类加载器用来把类加载到Java虚拟机中。从JDK1.2版本开始，类的加载过程采用双亲委派机制，这种机制能更好地保证java平台的安全。")]),a._v(" "),t("p",[a._v("**定义：**如果一个类加载器在接到加载类的请求时，它首先不会自己尝试去加载这个类，而是把这个请求任务委托给父类加载器去完成，依次递归，如果父类加载器可以完成类加载任务，就成功返回。只有父类加载器无法完成此加载任务时，才自己去加载。")]),a._v(" "),t("p",[a._v("**本质：**规定了类加载的顺序是，引导类加载器先加载，若加载不到，由扩展类加载器加载，若还加载不到，才会由系统类加载器或自定义的类加载器进行加载。")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210401094754200",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/9628cd0f485440d4832121dd08f21883.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/9628cd0f485440d4832121dd08f21883.png",alt:"image-20210401094754200"}})])]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210401095449336",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/b8f49fab72f34abb8d58762a1ecda111.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/b8f49fab72f34abb8d58762a1ecda111.png",alt:"image-20210401095449336"}})])]),a._v(" "),t("h3",{attrs:{id:"_5-2-优势与劣势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-优势与劣势"}},[a._v("#")]),a._v(" 5.2 优势与劣势")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("双亲委派机制优势\n避免类的重复加载，确保一个类的全局唯一性\nJava类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。\n保护程序安全，防止核心API被随意篡改")])]),a._v(" "),t("li",[t("p",[a._v("代码支持\n双亲委派机制在"),t("code",[a._v("java.lang.ClassLoader.loadClass(String,boolean)")]),a._v("接口中体现。该接口的逻辑如下:")]),a._v(" "),t("ol",[t("li",[a._v("先在当前加载器的缓存中查找有无目标类，如果有，直接返回。")]),a._v(" "),t("li",[a._v("判断当前加载器的父加载器是否为空，如果不为空，则调用"),t("code",[a._v("parent.loadClass(name，false)")]),a._v("接口进行加载。")]),a._v(" "),t("li",[a._v("反之，如果当前加载器的父类加载器为空，则调用"),t("code",[a._v("findBootstrapClassOrNull(name)")]),a._v("接口，让引导类加载器进加载。")]),a._v(" "),t("li",[a._v("如果通过以上3条路径都没能成功加载，则调用"),t("code",[a._v("findClass(name)")]),a._v("方法进行加载。该接口最终会调用"),t("code",[a._v("java.lang.ClassLoader")]),a._v("接口的"),t("code",[a._v("defineClass")]),a._v("系列的native接口加载目标"),t("code",[a._v("Java")]),a._v("类。\n双亲委派的模型就隐藏在这第2和第3步中。")])])]),a._v(" "),t("li",[t("p",[a._v("举例\n假设当前加载的是"),t("code",[a._v("java.lang.Object")]),a._v("这个类，很显然，该类属于"),t("code",[a._v("JDK")]),a._v("中核心得不能再核心的一个类，因此一定只能由引导类加载器进行加载。当"),t("code",[a._v("JVM")]),a._v("准备加载"),t("code",[a._v("java.lang.Object")]),a._v("时，"),t("code",[a._v("JVM")]),a._v("默认会使用系统类加载器去加载，按照上面4步加载的逻辑，在第1步从系统类的缓存中肯定查找不到该类，于是进入第2步。由于从系统类加载器的父加载器是扩展类加载器，于是扩展类加载器继续从第1步开始重复。由于扩展类加载器的缓存中也一定查找不到该类，因此进入第2步。扩展类的父加载器是null,因此系统调用"),t("code",[a._v("findClass(String)")]),a._v("，最终通过引导类加载器进行加载。")])]),a._v(" "),t("li",[t("p",[a._v("思考\n如果在自定义的类加载器中重写"),t("code",[a._v("java.lang.ClassLoader.loadClass(String)")]),a._v("或"),t("code",[a._v("java.lang.ClassLoader.loadClass(String, boolean)")]),a._v("方法,抹去其中的双亲委派机制,仅保留上面这4步中的第1步与第4步，那么是不是就能够加载核心类库了呢?\n这也不行!因为"),t("code",[a._v("JDK")]),a._v("还为核心类库提供了一层保护机制。不管是自定义的类加载器，还是系统类加载器还是扩展类加载器，最终都必须调用"),t("code",[a._v("java.lang.classLoader.defineClass(String,byte[], int, int, ProtectionDomain)")]),a._v("方法，而该方法会执行"),t("code",[a._v("preDefineClass()")]),a._v("接口，该接口中提供了对"),t("code",[a._v("JDK")]),a._v("核心类库的保护。")])]),a._v(" "),t("li",[t("p",[a._v("双亲委托模式的弊端\n检查类是否加载的委托过程是单向的，这个方式虽然从结构上说比较清晰，使各个"),t("code",[a._v("ClassLoader")]),a._v("的职责非常明确，但是同时会带来一个问题，即顶层的"),t("code",[a._v("ClassLoader")]),a._v("无法访问底层的"),t("code",[a._v("ClassLoader")]),a._v("所加载的类。")])])]),a._v(" "),t("p",[a._v("通常情况下，启动类加载器中的类为系统核心类，包括一些重要的系统接口，而在应用类加载器中，为应用类。按照这种模式，应用类访问系统类自然是没有问题，但是系统类访问应用类就会出现问题。比如在系统类中提供了一个接口，该接口需要在应用类中得以实现，该接口还绑定一个工厂方法，用于创建该接口的实例，而接口和工厂方法都在启动类加载器中。这时，就会出现该工厂方法无法创建由应用类加载器加载的应用实例的问题。")]),a._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[a._v("结论\n由于"),t("code",[a._v("Java")]),a._v("虚拟机规范并没有明确要求类加载器的加载机制一定要使用双亲委派模型，只是建议采用这种方式而己。\n比如在"),t("code",[a._v("Tomcat")]),a._v("中，类加载器所采用的加载机制就和传统的双亲委派模型有一定区别，当缺省的类加载器接收到一个类的加载任务时，首先会由它自行加载，当它加载失败时，才会将类的加载任务委派给它的超类加载器去执行，这同时也是Servlet规范推荐的一种做法。")])]),a._v(" "),t("h3",{attrs:{id:"_5-3-破坏双亲委派机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-破坏双亲委派机制"}},[a._v("#")]),a._v(" 5.3 破坏双亲委派机制")]),a._v(" "),t("p",[a._v("双亲委派模型并不是一个具有强制性约束的模型，而是Java设计者推荐给开发者们的类加载器实现方式。")]),a._v(" "),t("p",[a._v("在Java的世界中大部分的类加载器都遵循这个模型，但也有例外的情况，直到Java模块化出现为止，双亲委派模型主要出现过3次较大规模“被破坏”的情况。")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("第一次破坏双亲委派机制")]),a._v(" "),t("p",[a._v("双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前--即"),t("code",[a._v("JDK1.2")]),a._v("面世以前的“远古”时代。\n由于双亲委派模型在"),t("code",[a._v("JDK 1.2")]),a._v("之后才被引入，但是类加载器的概念和抽象类"),t("code",[a._v("java.lang.ClassLoader")]),a._v("则在"),t("code",[a._v("Java")]),a._v("的第一个版本中就已经存在，面对已经存在的用户自定义类加载器的代码，"),t("code",[a._v("Java")]),a._v("设计者们引入双亲委派模型时不得不做出一些妥协，为了兼容这些已有代码，无法再以技术手段避免"),t("code",[a._v("loadClass()")]),a._v("被子类覆盖的可能性，只能在"),t("code",[a._v("JDK1.2")]),a._v("之后的"),t("code",[a._v("java.lang.ClassLoader")]),a._v("中添加一个新的"),t("code",[a._v("protected")]),a._v("方法"),t("code",[a._v("findClass()")]),a._v("，并引导用户编写的类加载逻辑时尽可能去重写这个方法，而不是在"),t("code",[a._v("loadClass()")]),a._v("中编写代码。上节我们已经分析过"),t("code",[a._v("loadClass()")]),a._v("方法，双亲委派的具体逻辑就实现在这里面，按照"),t("code",[a._v("loadClass()")]),a._v("方法的逻辑，如果父类加载失败，会自动调用自己的"),t("code",[a._v("findClass()")]),a._v("方法来完成加载，这样既不影响用户按照自己的意愿去加载类，又可以保证新写出来的类加载器是符合双亲委派规则的。")])]),a._v(" "),t("li",[t("p",[a._v("第二次破坏双亲委派机制")]),a._v(" "),t("p",[a._v("线程上下文类加载器")]),a._v(" "),t("p",[a._v("双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷导致的，双亲委派很好地解决了各个类加载器协作时基础类型的一致性问题〈越基础的类由越上层的加载器进行加载），基础类型之所以被称为“基础”，是因为它们总是作为被用户代码继承、调用的"),t("code",[a._v("API")]),a._v("存在，但程序设计往往没有绝对不变的完美规则，如果有基础类型又要调用回用户的代码,那该怎么办呢?")]),a._v(" "),t("p",[a._v("这并非是不可能出现的事情，一个典型的例子便是"),t("code",[a._v("JNDI")]),a._v("服务，"),t("code",[a._v("JNDI")]),a._v("现在已经是"),t("code",[a._v("Java")]),a._v("的标准服务，它的代码由启动类加载器来完成加载（在"),t("code",[a._v("JDK 1.3")]),a._v("时加入到"),t("code",[a._v("rt.jar")]),a._v("的)，肯定属于"),t("code",[a._v("Java")]),a._v("中很基础的类型了。但"),t("code",[a._v("JNDI")]),a._v("存在的目的就是对资源进行查找和集中管理，它需要调用由其他厂商实现并部署在应用程序的"),t("code",[a._v("ClassPath")]),a._v("下的"),t("code",[a._v("NDI")]),a._v("服务提供者接口（"),t("code",[a._v("Service Provider Interface，SPI")]),a._v("）的代码，现在问题来了，启动类加载器是绝不可能认识、加载这些代码的，那该怎么办?("),t("code",[a._v("SPI")]),a._v(": 在"),t("code",[a._v("Java")]),a._v("平台中，通常把核心类"),t("code",[a._v("rt.jar")]),a._v("中提供外部服务、可由应用层自行实现的接口称为"),t("code",[a._v("SPI")]),a._v(")")]),a._v(" "),t("p",[a._v("为了解决这个困境，"),t("code",[a._v("Java")]),a._v("的设计团队只好引入了一个不太优雅的设计:线程上下文类加载器（"),t("code",[a._v("Thread ContextClassLoader")]),a._v(")。这个类加载器可以通过"),t("code",[a._v("java.lang.Thread")]),a._v("类的"),t("code",[a._v("setContextClassLoader()")]),a._v("方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是"),t("strong",[a._v("应用程序类加载器")]),a._v("。")]),a._v(" "),t("p",[a._v("有了线程上下文类加载器，程序就可以做一些“舞弊”的事情了。"),t("code",[a._v("JNDI")]),a._v("服务使用这个线程上下文类加载器去加载所需的SPI服务代码，这是一种父类加载器去请求子类加载器完成类加载的行为，这种行为实际上是打通了双亲委派模型的层次结构来逆向使用类加载器，已经违背了双亲委派模型的一般性原则，但也是无可奈何的事情。"),t("code",[a._v("Java")]),a._v("中涉及"),t("code",[a._v("SPI")]),a._v("的加载基本上都采用这种方式来完成，例如"),t("code",[a._v("NDI、JDBC、JCE、JAXB")]),a._v("和"),t("code",[a._v("BT")]),a._v("等。不过，当"),t("code",[a._v("SPI")]),a._v("的服务提供者多于一个的时候，代码就只能根据具体提供者的类型来硬编码判断，为了消除这种极不优雅的实现方式，在"),t("code",[a._v("JDK 6")]),a._v("时，"),t("code",[a._v("JDK")]),a._v("提供了"),t("code",[a._v("java.util.ServiceLoader")]),a._v("类，以"),t("code",[a._v("META-INF/services")]),a._v("中的配置信息，辅以责任链模式，这才算是给"),t("code",[a._v("SPI")]),a._v("的加载提供了一种相对合理的解决方案。")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210401101844601",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/31d1af3f22d54e158d54912dea88d72d.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/31d1af3f22d54e158d54912dea88d72d.png",alt:"image-20210401101844601"}})])]),a._v(" "),t("p",[t("strong",[a._v("默认上下文加载器就是应用类加载器")]),a._v("，这样以上下文加载器为中介，使得启动类加载器中的代码也可以访问应用类加载器中的类。")])]),a._v(" "),t("li",[t("p",[a._v("第三次破坏双亲委派机制")]),a._v(" "),t("p",[a._v("双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的。如:代码热替换"),t("code",[a._v("（Hot Swap)")]),a._v("、模块热部署（"),t("code",[a._v("Hot Deployment")]),a._v("）等\n"),t("code",[a._v("IBM")]),a._v("公司主导的"),t("code",[a._v("JSR-291")]),a._v("(即"),t("code",[a._v("OSGi R4.2")]),a._v("）实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块（"),t("code",[a._v("OSGi")]),a._v("中称为"),t("code",[a._v("Bundle")]),a._v(")都有一个自己的类加载器，当需要更换一个"),t("code",[a._v("Bundle")]),a._v("时，就把"),t("code",[a._v("Bundle")]),a._v("连同类加载器一起换掉以实现代码的热替换。在"),t("code",[a._v("OSGi")]),a._v("环境下，类加载器不再双亲委派模型推荐的树状结构，而是进一步发展为更加复杂的网状结构。")]),a._v(" "),t("p",[a._v("当收到类加载请求时，"),t("code",[a._v("OSGi")]),a._v("将按照下面的顺序进行类搜索:（不细讲）")]),a._v(" "),t("ol",[t("li",[a._v("将以"),t("code",[a._v("java.*")]),a._v("开头的类，委派给父类加载器加载。")]),a._v(" "),t("li",[a._v("否则，将委派列表名单内的类，委派给父类加载器加载。")]),a._v(" "),t("li",[a._v("否则，将"),t("code",[a._v("Import")]),a._v("列表中的类，委派给"),t("code",[a._v("Export")]),a._v("这个类的"),t("code",[a._v("Bundle")]),a._v("的类加载器加载。")]),a._v(" "),t("li",[a._v("否则，查找当前"),t("code",[a._v("Bundle")]),a._v("的"),t("code",[a._v("ClassPath")]),a._v("，使用自己的类加载器加载。")]),a._v(" "),t("li",[a._v("否则，查找类是否在自己的"),t("code",[a._v("Fragment Bundle")]),a._v("中，如果在，则委派给"),t("code",[a._v("Fragment Bundle")]),a._v("的类加载器加载。")]),a._v(" "),t("li",[a._v("否则，查找"),t("code",[a._v("Dynamic Import")]),a._v("列表的"),t("code",[a._v("Bundle")]),a._v("，委派给对应"),t("code",[a._v("Bundle")]),a._v("的类加载器加载。")]),a._v(" "),t("li",[a._v("否则，类查找失败。\n说明:只有开头两点仍然符合双亲委派模型的原则，其余的类查找都是在平级的类加载器中进行的")])]),a._v(" "),t("p",[a._v("小结:\n这里，我们使用了“被破坏”这个词来形容上述不符合双亲委派模型原则的行为，但这里“被破坏”并不一定是带有贬义的。只要有明确的目的和充分的理由，突破旧有原则无疑是一种创新。")]),a._v(" "),t("p",[a._v("正如"),t("code",[a._v("OSGi")]),a._v("中的类加载器的设计不符合传统的双亲委派的类加载器架构，且业界对其为了实现热部署而带来的额外的高复杂度还存在不少争议，但对这方面有了解的技术人员基本还是能达成一个共识，认为"),t("code",[a._v("OSGi")]),a._v("中对类加载器的运用是值得学习的，完全弄懂了"),t("code",[a._v("OSGi")]),a._v("的实现，就算是掌握了类加载器的精粹。")])])]),a._v(" "),t("h3",{attrs:{id:"_5-4-热替换的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-热替换的实现"}},[a._v("#")]),a._v(" 5.4 热替换的实现")]),a._v(" "),t("p",[a._v("热替换是指在程序的运行过程中，不停止服务，只通过替换程序文件来修改程序的行为。热替换的关键需求在于服务不能中断，修改必须立即表现正在运行的系统之中。基本上大部分脚本语言都是天生支持热替换的，比如: PHP，只要替换了PHP源文件，这种改动就会立即生效，而无需重启Web服务器。")]),a._v(" "),t("p",[a._v("但对"),t("code",[a._v("Java")]),a._v("来说，热替换并非天生就支持，如果一个类已经加载到系统中，通过修改类文件，并无法让系统再来加载并重新定义这个类。因此，在"),t("code",[a._v("Java")]),a._v("中实现这一功能的一个可行的方法就是灵活运用"),t("code",[a._v("ClassLoader")]),a._v("。")]),a._v(" "),t("p",[a._v("注意: 由不同"),t("code",[a._v("ClassLoader")]),a._v("加载的同名类属于不同的类型，不能相互转换和兼容。即两个不同的"),t("code",[a._v("ClassLoader")]),a._v("加载同个类，在虚拟机内部，会认为这2个类是完全不同的。")]),a._v(" "),t("p",[a._v("根据这个特点，可以用来模拟热替换的实现，基本思路如下图所示:")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210401103332009",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/a471dca7f25248f183d9f87ba413cc11.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/a471dca7f25248f183d9f87ba413cc11.png",alt:"image-20210401103332009"}})])]),a._v(" "),t("h2",{attrs:{id:"六、沙箱安全机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、沙箱安全机制"}},[a._v("#")]),a._v(" 六、沙箱安全机制")]),a._v(" "),t("h3",{attrs:{id:"_6-1-jdk1-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-jdk1-0"}},[a._v("#")]),a._v(" 6.1 jdk1.0")]),a._v(" "),t("p",[a._v("在Java中将执行程序分成本地代码和远程代码两种，本地代码默认视为可信任的，而远程代码则被看作是不受信的。对于授信的本地代码，可以访问一切本地资源。而对于非授信的远程代码在早期的Java实现中，安全依赖于沙箱（Sandbox）机制。如下图所示JDK1.0安全模型")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210401111307060",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/feba838e279b48758261ad8db8dc6f00.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/feba838e279b48758261ad8db8dc6f00.png",alt:"image-20210401111307060"}})])]),a._v(" "),t("h3",{attrs:{id:"_6-2-jdk1-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-jdk1-1"}},[a._v("#")]),a._v(" 6.2 jdk1.1")]),a._v(" "),t("p",[a._v("JDK1.0中如此严格的安全机制也给程序的功能扩展带来障碍，比如当用户希望远程代码访问本地系统的文件时候，就无法实现。\n因此在后续的Java1.1版本中，针对安全机制做了改进，增加了安全策略。允许用户指定代码对本地资源的访问权限。如下图所示JDK1.1安全模型")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210401111334192",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/db019e1bf49e40e089c365abadd79b85.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/db019e1bf49e40e089c365abadd79b85.png",alt:"image-20210401111334192"}})])]),a._v(" "),t("h3",{attrs:{id:"_6-3-jdk1-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-jdk1-2"}},[a._v("#")]),a._v(" 6.3 jdk1.2")]),a._v(" "),t("p",[a._v("在Java1.2版本中，再次改进了安全机制，增加了代码签名。不论本地代码或是远程代码，都会按照用户的安全策略设定，由类加载器加载到虚拟机中权限不同的运行空间，来实现差异化的代码执行权限控制。如下图所示JDK1.2安全模型")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210401111403605",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/a18527824ea640118bd8974a91ec8c39.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/a18527824ea640118bd8974a91ec8c39.png",alt:"image-20210401111403605"}})])]),a._v(" "),t("h3",{attrs:{id:"_6-4-jdk1-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-jdk1-6"}},[a._v("#")]),a._v(" 6.4 jdk1.6")]),a._v(" "),t("p",[a._v("当前最新的安全机制实现，则引入了域(Domain)的概念。\n虚拟机会把所有代码加载到不同的系统域和应用域。系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域(Protected Domain)，对应不一样的权限（Permission)。存在于不同域中的类文件就具有了当前域的全部权限，如下图所示，最新的安全模型（jdk1.6)")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210401111444789",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/46cd2487a808405b84d84584ee8d4983.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/46cd2487a808405b84d84584ee8d4983.png",alt:"image-20210401111444789"}})])]),a._v(" "),t("h2",{attrs:{id:"七、自定义类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、自定义类加载器"}},[a._v("#")]),a._v(" 七、自定义类加载器")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("为什么要自定义类加载器?")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("隔离加载类")]),a._v(" "),t("p",[a._v("在某些框架内进行中间件与应用的模块隔离，把类加载到不同的环境。比如:阿里内某容器框架通过自定义类加载器确保应用中依赖的jar包不会影响到中间件运行时使用的jar包。再比如: Tomcat这类web应用服务器，内部自定义了好几种类加载器，用于隔离同一个web应用服务器上的不同应用程序。（类的仲裁--\x3e类冲突）")])]),a._v(" "),t("li",[t("p",[a._v("修改类加载的方式")]),a._v(" "),t("p",[a._v("类的加载模型并非强制，除"),t("code",[a._v("Bootstrap")]),a._v("外，其他的加载并非一定要引入，或者根据实际情况在某个时间点进行按需进行动态加载")])]),a._v(" "),t("li",[t("p",[a._v("扩展加载源")])])]),a._v(" "),t("p",[a._v("比如从数据库、网络、甚至是电视机机顶盒进行加载")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("防止源码泄漏")]),a._v(" "),t("p",[a._v("Java代码容易被编译和篡改，可以进行编译加密。那么类加载也需要自定义，还原加密的字节码。")])])])]),a._v(" "),t("li",[t("p",[a._v("常见的场景")]),a._v(" "),t("ul",[t("li",[a._v("实现类似进程内隔离，类加载器实际上用作不同的命名空间，以提供类似容器、模块化的效果。例如，两个模块依赖于某个类库的不同版本，如果分别被不同的容器加载，就可以互不干扰。这个方面的集大成者是"),t("code",[a._v("Java EE")]),a._v("和"),t("code",[a._v("OSGI、JPMS")]),a._v("等框架。")]),a._v(" "),t("li",[a._v("应用需要从不同的数据源获取类定义信息，例如网络数据源，而不是本地文件系统。或者是需要自己操纵字节码，动态修改或者生成类型。")])])]),a._v(" "),t("li",[t("p",[a._v("注意\n在一般情况下，使用不同的类加载器去加载不同的功能模块，会提高应用程序的安全性。但是，如果涉及Java类型转换，则加载器反而容易产生不美好的事情。在做Java类型转换时，只有两个类型都是由同一个加载器所加载，才能进行类型转换，否则转换时会发生异常。")])])]),a._v(" "),t("p",[a._v("用户通过定制自己的类加载器，这样可以重新定义类的加载规则，以便实现一些自定义的处理逻辑。")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("实现方式\nJava提供了抽象类java.lang.ClassLoader，所有用户自定义的类加载器都应该继承ClassLoader类。\n在自定义ClassLoader 的子类时候，我们常见的会有两种做法:")]),a._v(" "),t("ul",[t("li",[a._v("方式一:重写loadclass()方法")]),a._v(" "),t("li",[a._v("方式二:重写findClass()方法【推荐】")])])]),a._v(" "),t("li",[t("p",[a._v("对比\n这两种方法本质上差不多，毕竟"),t("code",[a._v("loadClass()")]),a._v("也会调用"),t("code",[a._v("findClass()")]),a._v("，但是从逻辑上讲我们最好不要直接修改"),t("code",[a._v("loadClass()")]),a._v("的内部逻辑。建议的做法是只在"),t("code",[a._v("findClass()")]),a._v("里重写自定义类的加载方法，根据参数指定类的名字，返回对应的"),t("code",[a._v("Class")]),a._v("对象的引用。\n"),t("code",[a._v("loadClass()")]),a._v("这个方法是实现双亲委派模型逻辑的地方，擅自修改这个方法会导致模型被破坏，容易造成问题。因此我们最好是在双亲委派模型框架内进行小范围的改动，不破坏原有的稳定结构。同时，也避免了自己重写"),t("code",[a._v("loadClass()")]),a._v("方法的过程中必须写双亲委托的重复代码，从代码的复用性来看，不直接修改这个方法始终是比较好的选择。\n当编写好自定义类加载器后，便可以在程序中调用"),t("code",[a._v("loadClass()")]),a._v("方法来实现类加载操作。")])]),a._v(" "),t("li",[t("p",[a._v("说明\n其父类加载器是系统类加载器\n"),t("code",[a._v("JVM")]),a._v("中的所有类加载都会使用"),t("code",[a._v("java.lang.ClassLoader.loadClass(String)")]),a._v("接口(自定义类加载器并重写"),t("code",[a._v("java.lang.ClassLoader.loadClass(String)")]),a._v("接口的除外)，连"),t("code",[a._v("JDK")]),a._v("的核心类库也不能例外。")])])]),a._v(" "),t("h2",{attrs:{id:"八、java9新特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、java9新特性"}},[a._v("#")]),a._v(" 八、Java9新特性")]),a._v(" "),t("p",[a._v("为了保证兼容性，JDK 9没有从根本上改变三层类加载器架构和双亲委派模型，但为了模块化系统的顺利运行，仍然发生了一些值得被注意的变动。")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("扩展机制被移除，扩展类加载器由于向后兼容性的原因被保留，不过被重命名为平台类加载器（"),t("code",[a._v("platform classloader")]),a._v(")。可以通过"),t("code",[a._v("ClassLoader")]),a._v("的新方法"),t("code",[a._v("getPlatformClassLoader()")]),a._v("来获取。")]),a._v(" "),t("p",[t("code",[a._v("JDK 9")]),a._v("时基于模块化进行构建（原来的"),t("code",[a._v("rt.jar")]),a._v(" 和"),t("code",[a._v("tools.jar")]),a._v(" 被拆分成数十个 "),t("code",[a._v("JMOD")]),a._v(" 文件)，其中的"),t("code",[a._v("Java")]),a._v("类库就已天然地满足了可扩展的需求，那自然无须再保留"),t("code",[a._v("JAVA_HONE\\lib\\ext")]),a._v(" 目录，此前使用这个目录或者 "),t("code",[a._v("java.ext.dirs")]),a._v("系统变量来扩展JDK功能的机制已经没有继续存在的价值了。")])]),a._v(" "),t("li",[t("p",[a._v("平台类加载器和应用程序类加载器都不再继承自 "),t("code",[a._v("java.net.URLClassLoader")]),a._v("。\n现在"),t("strong",[a._v("启动类加载器、平台类加载器、应用程序类加载器全都继承于"),t("code",[a._v("jdk.internal.loader.BuiltinClassLoader")])]),a._v("。")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210401112508743",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/3d3b22f19c494fe08a605ee9c53a8d49.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/3d3b22f19c494fe08a605ee9c53a8d49.png",alt:"image-20210401112508743"}})])]),a._v(" "),t("p",[a._v("如果有程序直接依赖了这种继承关系，或者依赖了"),t("code",[a._v("URLClassLoader")]),a._v("类的特定方法，那代码很可能会在 "),t("code",[a._v("JDK9")]),a._v("及更高版本的"),t("code",[a._v("JDK")]),a._v("中崩溃。")])]),a._v(" "),t("li",[t("p",[a._v("在"),t("code",[a._v("Java 9")]),a._v("中，类加载器有了名称。该名称在构造方法中指定，可以通过"),t("code",[a._v("getName()")]),a._v("方法来获取。平台类加载器的名称是"),t("code",[a._v("platform")]),a._v("，应用类加载器的名称是"),t("code",[a._v("app")]),a._v("。类加载器的名称在调试与类加载器相关的问题时会非常有用。")])]),a._v(" "),t("li",[t("p",[a._v("启动类加载器现在是在"),t("code",[a._v("jvm")]),a._v("内部和"),t("code",[a._v("java")]),a._v("类库共同协作实现的类加载器(以前是"),t("code",[a._v("C++")]),a._v("实现)，但为了与之前代码兼容，在获取启动类加载器的场景中仍然会返回"),t("code",[a._v("null")]),a._v("，而不会得到"),t("code",[a._v("BootClassLoader")]),a._v("实例。")])]),a._v(" "),t("li",[t("p",[a._v("类加载的委派关系也发生了变动。\n当平台及应用程序类加载器收到类加载请求，在委派给父加载器加载前，要先判断该类是否能够归属到某一个系统模块中，如果可以找到这样的归属关系，就要优先委派给负责那个模块的加载器完成加载。")]),a._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"image-20210401112747834",href:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/03ed8630b78b4c098db76b638fdbbeb8.png"}},[t("img",{attrs:{src:"http://you-blog.oss-accelerate.aliyuncs.com/typora/2021-04-01/03ed8630b78b4c098db76b638fdbbeb8.png",alt:"image-20210401112747834"}})])]),a._v(" "),t("p",[a._v("在Java模块化系统明确规定了三个类加载器负责各自加载的模块")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);